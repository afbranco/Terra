206 911 7 6 0 0 48 6 48
00 | 0000 0 track 0
00 | 0001 0
00 | 0002 0
00 | 0003 0
00 | 0004 0 track 1
00 | 0005 0
00 | 0006 0
00 | 0007 0
00 | 0008 0 track 2
00 | 0009 0
00 | 0010 0
00 | 0011 0
00 | 0012 0 track 3
00 | 0013 0
00 | 0014 0
00 | 0015 0
00 | 0016 0 track 4
00 | 0017 0
00 | 0018 0
00 | 0019 0
00 | 0020 0 track 5
00 | 0021 0
00 | 0022 0
00 | 0023 0
00 | 0024 0 track 6
00 | 0025 0
00 | 0026 0
00 | 0027 0
00 | 0028 0 track 7
00 | 0029 0
00 | 0030 0
00 | 0031 0
00 | 0032 0000 wClock 0
00 | 0033 0001
00 | 0034 0002
00 | 0035 0003
00 | 0036 0004
00 | 0037 0005
00 | 0038 0006
00 | 0039 0007
00 | 0040 0008 wClock 1
00 | 0041 0009
00 | 0042 0010
00 | 0043 0011
00 | 0044 0012
00 | 0045 0013
00 | 0046 0014
00 | 0047 0015
00 | 0048 0016 wClock 2
00 | 0049 0017
00 | 0050 0018
00 | 0051 0019
00 | 0052 0020
00 | 0053 0021
00 | 0054 0022
00 | 0055 0023
00 | 0056 0024 wClock 3
00 | 0057 0025
00 | 0058 0026
00 | 0059 0027
00 | 0060 0028
00 | 0061 0029
00 | 0062 0030
00 | 0063 0031
00 | 0064 0032 wClock 4
00 | 0065 0033
00 | 0066 0034
00 | 0067 0035
00 | 0068 0036
00 | 0069 0037
00 | 0070 0038
00 | 0071 0039
00 | 0072 0040 wClock 5
00 | 0073 0041
00 | 0074 0042
00 | 0075 0043
00 | 0076 0044
00 | 0077 0045
00 | 0078 0046
00 | 0079 0047
00 | 0080 0048 inEvt 005 : TEMP
00 | 0081 0049           : 01 gates
00 | 0082 0050
00 | 0083 0051
00 | 0084 0052 inEvt 012 : CUSTOM_A
00 | 0085 0053           : 01 gates
00 | 0086 0054
00 | 0087 0055
00 | 0088 0056 inEvt 040 : SEND_DONE()
00 | 0089 0057           : 01 gates
00 | 0090 0058
00 | 0091 0059
00 | 0092 0060
00 | 0093 0061 inEvt 042 : SEND_DONE_ACK()
00 | 0094 0062           : 01 gates
00 | 0095 0063
00 | 0096 0064
00 | 0097 0065
00 | 0098 0066 inEvt 044 : RECEIVE()
00 | 0099 0067           : 04 gates
00 | 0100 0068
00 | 0101 0069
00 | 0102 0070
00 | 0103 0071
00 | 0104 0072
00 | 0105 0073
00 | 0106 0074
00 | 0107 0075
00 | 0108 0076
00 | 0109 0077
00 | 0110 0078
00 | 0111 0079
00 | 0112 0080 inEvt 046 : Q_READY
00 | 0113 0081           : 01 gates
00 | 0114 0082
00 | 0115 0083
00 | 0116 0084 $ret:1, 
00 | 0117 0085 nodeId:2, 
00 | 0118 0086 
00 | 0119 0087 baseNode:2, 
00 | 0120 0088 
00 | 0121 0089 stat:1, 
00 | 0122 0090 hop:1, 
00 | 0123 0091 father:2, 
00 | 0124 0092 
00 | 0125 0093 seqReq:2, 
00 | 0126 0094 
00 | 0127 0095 seqData:1, 
00 | 0128 0096 reqTopoBlind:1, 
00 | 0129 0097 msgTopo:25, 
00 | 0130 0098 
00 | 0131 0099 
00 | 0132 0100 
00 | 0133 0101 
00 | 0134 0102 
00 | 0135 0103 
00 | 0136 0104 
00 | 0137 0105 
00 | 0138 0106 
00 | 0139 0107 
00 | 0140 0108 
00 | 0141 0109 
00 | 0142 0110 
00 | 0143 0111 
00 | 0144 0112 
00 | 0145 0113 
00 | 0146 0114 
00 | 0147 0115 
00 | 0148 0116 
00 | 0149 0117 
00 | 0150 0118 
00 | 0151 0119 
00 | 0152 0120 
00 | 0153 0121 
00 | 0154 0122 msgRadio:25, 
00 | 0155 0123 
00 | 0156 0124 
00 | 0157 0125 
00 | 0158 0126 
00 | 0159 0127 
00 | 0160 0128 
00 | 0161 0129 
00 | 0162 0130 
00 | 0163 0131 
00 | 0164 0132 
00 | 0165 0133 
00 | 0166 0134 
00 | 0167 0135 
00 | 0168 0136 
00 | 0169 0137 
00 | 0170 0138 
00 | 0171 0139 
00 | 0172 0140 
00 | 0173 0141 
00 | 0174 0142 
00 | 0175 0143 
00 | 0176 0144 
00 | 0177 0145 
00 | 0178 0146 
00 | 0179 0147 msgData:25, 
00 | 0180 0148 
00 | 0181 0149 
00 | 0182 0150 
00 | 0183 0151 
00 | 0184 0152 
00 | 0185 0153 
00 | 0186 0154 
00 | 0187 0155 
00 | 0188 0156 
00 | 0189 0157 
00 | 0190 0158 
00 | 0191 0159 
00 | 0192 0160 
00 | 0193 0161 
00 | 0194 0162 
00 | 0195 0163 
00 | 0196 0164 
00 | 0197 0165 
00 | 0198 0166 
00 | 0199 0167 
00 | 0200 0168 
00 | 0201 0169 
00 | 0202 0170 
00 | 0203 0171 
00 | 0204 0172 ack:1, 
00 | 0205 0173 reply:1, 
e5 | 0206 e5 set16_c ushort 48 1281        | config gate TEMP with 1 await(s) - 0x0501 = 1281
30 | 0207 30 
05 | 0208 05 
01 | 0209 01 
e5 | 0210 e5 set16_c ushort 52 3073        | config gate CUSTOM_A with 1 await(s) - 0x0c01 = 3073
34 | 0211 34 
0c | 0212 0c 
01 | 0213 01 
e5 | 0214 e5 set16_c ushort 56 10369       | config gate SEND_DONE() with 1 await(s) - 0x2881 = 10369
38 | 0215 38 
28 | 0216 28 
81 | 0217 81 
e5 | 0218 e5 set16_c ushort 61 10881       | config gate SEND_DONE_ACK() with 1 await(s) - 0x2a81 = 10881
3d | 0219 3d 
2a | 0220 2a 
81 | 0221 81 
e5 | 0222 e5 set16_c ushort 66 11396       | config gate RECEIVE() with 4 await(s) - 0x2c84 = 11396
42 | 0223 42 
2c | 0224 2c 
84 | 0225 84 
e5 | 0226 e5 set16_c ushort 80 11777       | config gate Q_READY with 1 await(s) - 0x2e01 = 11777
50 | 0227 50 
2e | 0228 2e 
01 | 0229 01 
19 | 0230 19 func 0                        | func getNodeId
00 | 0231 00 
21 | 0232 21 popx ushort 85                | pop nodeId
55 | 0233 55 
e4 | 0234 e4 set16_c ushort 87 2           | baseNode = 2
57 | 0235 57 
02 | 0236 02 
28 | 0237 28 push_c 10                     | push 10
0a | 0238 0a 
39 | 0239 39 pushx_v ushort 85             | push nodeId:ushort
55 | 0240 55 
14 | 0241 14 gt                            | gt
7f | 0242 7f ifelse 8 9                    | ifelse True_8 EndIf_9
00 | 0243 .00 addr:247
f7 | 0244 .08 
00 | 0245 .00 addr:253
fd | 0246 .09 
e4 | 0247 e4 set16_c ushort 87 11          | baseNode = 11
57 | 0248 57 
0b | 0249 0b 
75 | 0250 75 exec 9                        | goto  9
00 | 0251 .00 addr:253
fd | 0252 .09 
e5 | 0253 e5 set16_c ushort 91 0xfffe      | father = 0xfffe
5b | 0254 5b 
ff | 0255 ff 
fe | 0256 fe 
e4 | 0257 e4 set16_c ushort 93 0           | seqReq = 0
5d | 0258 5d 
00 | 0259 00 
e0 | 0260 e0 set16_c ubyte 95 0            | seqData = 0
5f | 0261 5f 
00 | 0262 00 
e0 | 0263 e0 set16_c ubyte 96 0            | reqTopoBlind = 0
60 | 0264 60 
00 | 0265 00 
e0 | 0266 e0 set16_c ubyte 147 2           | msgData.type = 2
93 | 0267 93 
02 | 0268 02 
f4 | 0269 f4 set_v ushort 148 85           | msgData.source = nodeId
94 | 0270 94 
55 | 0271 55 
f4 | 0272 f4 set_v ushort 160 85           | msgData.d16_3 = nodeId
a0 | 0273 a0 
55 | 0274 55 
f4 | 0275 f4 set_v ushort 98 85            | msgTopo.source = nodeId
62 | 0276 62 
55 | 0277 55 
39 | 0278 39 pushx_v ushort 87             | push baseNode:ushort
57 | 0279 57 
39 | 0280 39 pushx_v ushort 85             | push nodeId:ushort
55 | 0281 55 
10 | 0282 10 eq                            | eq
7f | 0283 7f ifelse 19 20                  | ifelse True_19 EndIf_20
01 | 0284 .00 addr:288
20 | 0285 .13 
01 | 0286 .00 addr:297
29 | 0287 .14 
e4 | 0288 e4 set16_c ushort 91 1           | father = 1
5b | 0289 5b 
01 | 0290 01 
e4 | 0291 e4 set16_c ushort 93 1           | seqReq = 1
5d | 0292 5d 
01 | 0293 01 
75 | 0294 75 exec 20                       | goto  20
01 | 0295 .00 addr:297
29 | 0296 .14 
d1 | 0297 d1 tkins_max 0 21                | insert track ParEver_sub_1_21
01 | 0298 .00 addr:313
39 | 0299 .15 
d1 | 0300 d1 tkins_max 0 22                | insert track ParEver_sub_2_22
01 | 0301 .00 addr:435
b3 | 0302 .16 
d1 | 0303 d1 tkins_max 0 23                | insert track ParEver_sub_3_23
01 | 0304 .00 addr:477
dd | 0305 .17 
d1 | 0306 d1 tkins_max 0 24                | insert track ParEver_sub_4_24
02 | 0307 .00 addr:659
93 | 0308 .18 
d1 | 0309 d1 tkins_max 0 25                | insert track ParEver_sub_5_25
02 | 0310 .00 addr:720
d0 | 0311 .19 
01 | 0312 01 end                           | end
a5 | 0313 a5 clken_c 0 2000 29             | clock enable Awake_2000_29 2000msec
00 | 0314 00 
07 | 0315 07 
d0 | 0316 d0 
01 | 0317 .00 addr:320
40 | 0318 .1d 
01 | 0319 01 end                           | end
68 | 0320 68 outevt_c 20 1                 | emit REQ_CUSTOM_A len=1 const=1
14 | 0321 14 
01 | 0322 01 
d1 | 0323 d1 tkins_max 0 35                | insert track ParOr_sub_1_35
01 | 0324 .00 addr:330
4a | 0325 .23 
d1 | 0326 d1 tkins_max 0 36                | insert track ParOr_sub_2_36
01 | 0327 .00 addr:341
55 | 0328 .24 
01 | 0329 01 end                           | end
a5 | 0330 a5 clken_c 1 30000 38            | clock enable Awake_30000_38 30000msec
01 | 0331 01 
75 | 0332 75 
30 | 0333 30 
01 | 0334 .00 addr:337
51 | 0335 .26 
01 | 0336 01 end                           | end
d1 | 0337 d1 tkins_max 0 37                | insert track ParOr_out_37
01 | 0338 .00 addr:419
a3 | 0339 .25 
01 | 0340 01 end                           | end
a5 | 0341 a5 clken_c 2 10000 39            | clock enable Awake_10000_39 10000msec
02 | 0342 02 
27 | 0343 27 
10 | 0344 10 
01 | 0345 .00 addr:348
5c | 0346 .27 
01 | 0347 01 end                           | end
1a | 0348 1a outevt_z 9                    | emit REQ_TEMP
09 | 0349 09 
e5 | 0350 e5 set16_c ushort 50 42          | await TEMP[0]
32 | 0351 32 
01 | 0352 .00 addr:355
63 | 0353 .2a 
01 | 0354 01 end                           | end
28 | 0355 28 push_c 156                    | push msgData.d16_1
9c | 0356 9c 
98 | 0357 98 getextdt_e 2                  | getExtData stack len=2
02 | 0358 02 
29 | 0359 29 push_c 0xfffe                 | push 0xfffe
ff | 0360 ff 
fe | 0361 fe 
39 | 0362 39 pushx_v ushort 91             | push father:ushort
5b | 0363 5b 
11 | 0364 11 neq                           | neq
7f | 0365 7f ifelse 55 56                  | ifelse True_55 False_56
01 | 0366 .00 addr:370
72 | 0367 .37 
01 | 0368 .00 addr:408
98 | 0369 .38 
f4 | 0370 f4 set_v ushort 150 91           | msgData.target = father
96 | 0371 96 
5b | 0372 5b 
28 | 0373 28 push_c 95                     | push &seqData
5f | 0374 5f 
58 | 0375 58 inc ubyte                     | inc ubyte
38 | 0376 38 pushx_v ubyte 95              | push seqData:ubyte
5f | 0377 5f 
1b | 0378 1b outevt_e 5                    | emit LEDS
05 | 0379 05 
f0 | 0380 f0 set_v ubyte 154 95            | msgData.d8_3 = seqData
9a | 0381 9a 
5f | 0382 5f 
f4 | 0383 f4 set_v ushort 162 91           | msgData.d16_4 = father
a2 | 0384 a2 
5b | 0385 5b 
f0 | 0386 f0 set_v ubyte 153 96            | msgData.d8_2 = reqTopoBlind
99 | 0387 99 
60 | 0388 60 
28 | 0389 28 push_c 100                    | push 100
64 | 0390 64 
39 | 0391 39 pushx_v ushort 85             | push nodeId:ushort
55 | 0392 55 
09 | 0393 09 mult                          | mult
c4 | 0394 c4 clken_e 3 0 52                | clock enable Awake_exp_52 (stack)ms
03 | 0395 03 
01 | 0396 .00 addr:399
8f | 0397 .34 
01 | 0398 01 end                           | end
28 | 0399 28 push_c 147                    | push_c &msgData:usrMsg2_t
93 | 0400 93 
19 | 0401 19 func 10                       | func qPut
0a | 0402 0a 
20 | 0403 20 popx ubyte 89                 | pop stat
59 | 0404 59 
75 | 0405 75 exec 57                       | goto  57
01 | 0406 .00 addr:414
9e | 0407 .39 
68 | 0408 68 outevt_c 20 1                 | emit REQ_CUSTOM_A len=1 const=1
14 | 0409 14 
01 | 0410 01 
75 | 0411 75 exec 57                       | goto  57
01 | 0412 .00 addr:414
9e | 0413 .39 
01 | 0414 01 end                           | end
d1 | 0415 d1 tkins_max 0 37                | insert track ParOr_out_37
01 | 0416 .00 addr:419
a3 | 0417 .25 
01 | 0418 01 end                           | end
78 | 0419 78 memclr 8 24                   | clear WClocks gates from 1 to 4
08 | 0420 08 
18 | 0421 18 
78 | 0422 78 memclr 50 2                   | clear EXT gates for TEMP
32 | 0423 32 
02 | 0424 02 
75 | 0425 75 exec 32                       | goto  32
01 | 0426 .00 addr:323
43 | 0427 .20 
78 | 0428 78 memclr 8 24                   | clear WClocks gates from 1 to 4
08 | 0429 08 
18 | 0430 18 
78 | 0431 78 memclr 50 2                   | clear EXT gates for TEMP
32 | 0432 32 
02 | 0433 02 
01 | 0434 01 end                           | end
28 | 0435 28 push_c 2                      | push 2
02 | 0436 02 
20 | 0437 20 popx ubyte 68                 | evt RECEIVE() auxId = pop
44 | 0438 44 
e5 | 0439 e5 set16_c ushort 69 61          | await RECEIVE()[0]
45 | 0440 45 
01 | 0441 .00 addr:444
bc | 0442 .3d 
01 | 0443 01 end                           | end
50 | 0444 50 getextdt_v 97 25              | getExtData msgTopo 25
61 | 0445 61 
19 | 0446 19 
29 | 0447 29 push_c 0xfffe                 | push 0xfffe
ff | 0448 ff 
fe | 0449 fe 
39 | 0450 39 pushx_v ushort 91             | push father:ushort
5b | 0451 5b 
11 | 0452 11 neq                           | neq
7f | 0453 7f ifelse 64 65                  | ifelse True_64 EndIf_65
01 | 0454 .00 addr:458
ca | 0455 .40 
01 | 0456 .00 addr:470
d6 | 0457 .41 
f4 | 0458 f4 set_v ushort 100 91           | msgTopo.target = father
64 | 0459 64 
5b | 0460 5b 
28 | 0461 28 push_c 97                     | push_c &msgTopo:usrMsg2_t
61 | 0462 61 
19 | 0463 19 func 10                       | func qPut
0a | 0464 0a 
20 | 0465 20 popx ubyte 89                 | pop stat
59 | 0466 59 
75 | 0467 75 exec 65                       | goto  65
01 | 0468 .00 addr:470
d6 | 0469 .41 
75 | 0470 75 exec 58                       | goto  58
01 | 0471 .00 addr:435
b3 | 0472 .3a 
78 | 0473 78 memclr 68 2                   | clear EXT gates for RECEIVE()
44 | 0474 44 
02 | 0475 02 
01 | 0476 01 end                           | end
39 | 0477 39 pushx_v ushort 87             | push baseNode:ushort
57 | 0478 57 
39 | 0479 39 pushx_v ushort 85             | push nodeId:ushort
55 | 0480 55 
11 | 0481 11 neq                           | neq
7f | 0482 7f ifelse 101 102                | ifelse True_101 False_102
01 | 0483 .00 addr:487
e7 | 0484 .65 
02 | 0485 .00 addr:602
5a | 0486 .66 
d1 | 0487 d1 tkins_max 0 68                | insert track ParEver_sub_1_68
01 | 0488 .00 addr:494
ee | 0489 .44 
d1 | 0490 d1 tkins_max 0 69                | insert track ParEver_sub_2_69
02 | 0491 .00 addr:551
27 | 0492 .45 
01 | 0493 01 end                           | end
28 | 0494 28 push_c 1                      | push 1
01 | 0495 01 
20 | 0496 20 popx ubyte 71                 | evt RECEIVE() auxId = pop
47 | 0497 47 
e5 | 0498 e5 set16_c ushort 72 76          | await RECEIVE()[1]
48 | 0499 48 
01 | 0500 .00 addr:503
f7 | 0501 .4c 
01 | 0502 01 end                           | end
50 | 0503 50 getextdt_v 97 25              | getExtData msgTopo 25
61 | 0504 61 
19 | 0505 19 
39 | 0506 39 pushx_v ushort 93             | push seqReq:ushort
5d | 0507 5d 
28 | 0508 28 push_c 108                    | push msgTopo.d16_2
6c | 0509 6c 
95 | 0510 95 deref ushort                  | deref ushort
14 | 0511 14 gt                            | gt
7f | 0512 7f ifelse 83 84                  | ifelse True_83 EndIf_84
02 | 0513 .00 addr:517
05 | 0514 .53 
02 | 0515 .00 addr:544
20 | 0516 .54 
e0 | 0517 e0 set16_c ubyte 96 0            | reqTopoBlind = 0
60 | 0518 60 
00 | 0519 00 
f4 | 0520 f4 set_v ushort 93 108           | seqReq = msgTopo.d16_2
5d | 0521 5d 
6c | 0522 6c 
f4 | 0523 f4 set_v ushort 91 98            | father = msgTopo.source
5b | 0524 5b 
62 | 0525 62 
28 | 0526 28 push_c 103                    | push msgTopo.d8_2
67 | 0527 67 
58 | 0528 58 inc ubyte                     | inc ubyte
f0 | 0529 f0 set_v ubyte 90 103            | hop = msgTopo.d8_2
5a | 0530 5a 
67 | 0531 67 
f4 | 0532 f4 set_v ushort 98 85            | msgTopo.source = nodeId
62 | 0533 62 
55 | 0534 55 
28 | 0535 28 push_c 97                     | push_c &msgTopo:usrMsg2_t
61 | 0536 61 
19 | 0537 19 func 10                       | func qPut
0a | 0538 0a 
20 | 0539 20 popx ubyte 89                 | pop stat
59 | 0540 59 
75 | 0541 75 exec 84                       | goto  84
02 | 0542 .00 addr:544
20 | 0543 .54 
75 | 0544 75 exec 73                       | goto  73
01 | 0545 .00 addr:494
ee | 0546 .49 
78 | 0547 78 memclr 68 2                   | clear EXT gates for RECEIVE()
44 | 0548 44 
02 | 0549 02 
01 | 0550 01 end                           | end
28 | 0551 28 push_c 3                      | push 3
03 | 0552 03 
20 | 0553 20 popx ubyte 74                 | evt RECEIVE() auxId = pop
4a | 0554 4a 
e5 | 0555 e5 set16_c ushort 75 88          | await RECEIVE()[2]
4b | 0556 4b 
02 | 0557 .00 addr:560
30 | 0558 .58 
01 | 0559 01 end                           | end
50 | 0560 50 getextdt_v 97 25              | getExtData msgTopo 25
61 | 0561 61 
19 | 0562 19 
28 | 0563 28 push_c 0                      | push 0
00 | 0564 00 
38 | 0565 38 pushx_v ubyte 96              | push reqTopoBlind:ubyte
60 | 0566 60 
10 | 0567 10 eq                            | eq
29 | 0568 29 push_c 0xfffe                 | push 0xfffe
ff | 0569 ff 
fe | 0570 fe 
39 | 0571 39 pushx_v ushort 91             | push father:ushort
5b | 0572 5b 
11 | 0573 11 neq                           | neq
17 | 0574 17 land                          | land
7f | 0575 7f ifelse 92 93                  | ifelse True_92 EndIf_93
02 | 0576 .00 addr:580
44 | 0577 .5c 
02 | 0578 .00 addr:592
50 | 0579 .5d 
f4 | 0580 f4 set_v ushort 100 91           | msgTopo.target = father
64 | 0581 64 
5b | 0582 5b 
28 | 0583 28 push_c 97                     | push_c &msgTopo:usrMsg2_t
61 | 0584 61 
19 | 0585 19 func 10                       | func qPut
0a | 0586 0a 
20 | 0587 20 popx ubyte 89                 | pop stat
59 | 0588 59 
75 | 0589 75 exec 93                       | goto  93
02 | 0590 .00 addr:592
50 | 0591 .5d 
75 | 0592 75 exec 85                       | goto  85
02 | 0593 .00 addr:551
27 | 0594 .55 
78 | 0595 78 memclr 68 2                   | clear EXT gates for RECEIVE()
44 | 0596 44 
02 | 0597 02 
01 | 0598 01 end                           | end
75 | 0599 75 exec 103                      | goto  103
02 | 0600 .00 addr:658
92 | 0601 .67 
28 | 0602 28 push_c 3                      | push 3
03 | 0603 03 
20 | 0604 20 popx ubyte 77                 | evt RECEIVE() auxId = pop
4d | 0605 4d 
e5 | 0606 e5 set16_c ushort 78 97          | await RECEIVE()[3]
4e | 0607 4e 
02 | 0608 .00 addr:611
63 | 0609 .61 
01 | 0610 01 end                           | end
50 | 0611 50 getextdt_v 97 25              | getExtData msgTopo 25
61 | 0612 61 
19 | 0613 19 
e0 | 0614 e0 set16_c ubyte 97 1            | msgTopo.type = 1
61 | 0615 61 
01 | 0616 01 
f4 | 0617 f4 set_v ushort 98 85            | msgTopo.source = nodeId
62 | 0618 62 
55 | 0619 55 
e5 | 0620 e5 set16_c ushort 100 0xffff     | msgTopo.target = 0xffff
64 | 0621 64 
ff | 0622 ff 
ff | 0623 ff 
e0 | 0624 e0 set16_c ubyte 103 0           | msgTopo.d8_2 = 0
67 | 0625 67 
00 | 0626 00 
28 | 0627 28 push_c 93                     | push &seqReq
5d | 0628 5d 
59 | 0629 59 inc ushort                    | inc ushort
f4 | 0630 f4 set_v ushort 108 93           | msgTopo.d16_2 = seqReq
6c | 0631 6c 
5d | 0632 5d 
28 | 0633 28 push_c 97                     | push_c &msgTopo:usrMsg2_t
61 | 0634 61 
19 | 0635 19 func 10                       | func qPut
0a | 0636 0a 
20 | 0637 20 popx ubyte 89                 | pop stat
59 | 0638 59 
a5 | 0639 a5 clken_c 4 2000 100            | clock enable Awake_2000_100 2000msec
04 | 0640 04 
07 | 0641 07 
d0 | 0642 d0 
02 | 0643 .00 addr:646
86 | 0644 .64 
01 | 0645 01 end                           | end
75 | 0646 75 exec 94                       | goto  94
02 | 0647 .00 addr:602
5a | 0648 .5e 
78 | 0649 78 memclr 32 8                   | clear WClocks gates from 4 to 5
20 | 0650 20 
08 | 0651 08 
78 | 0652 78 memclr 68 2                   | clear EXT gates for RECEIVE()
44 | 0653 44 
02 | 0654 02 
75 | 0655 75 exec 103                      | goto  103
02 | 0656 .00 addr:658
92 | 0657 .67 
01 | 0658 01 end                           | end
39 | 0659 39 pushx_v ushort 87             | push baseNode:ushort
57 | 0660 57 
39 | 0661 39 pushx_v ushort 85             | push nodeId:ushort
55 | 0662 55 
11 | 0663 11 neq                           | neq
7f | 0664 7f ifelse 115 116                | ifelse True_115 EndIf_116
02 | 0665 .00 addr:669
9d | 0666 .73 
02 | 0667 .00 addr:719
cf | 0668 .74 
e5 | 0669 e5 set16_c ushort 54 109         | await CUSTOM_A[0]
36 | 0670 36 
02 | 0671 .00 addr:674
a2 | 0672 .6d 
01 | 0673 01 end                           | end
29 | 0674 29 push_c 0xfffe                 | push 0xfffe
ff | 0675 ff 
fe | 0676 fe 
39 | 0677 39 pushx_v ushort 91             | push father:ushort
5b | 0678 5b 
10 | 0679 10 eq                            | eq
7f | 0680 7f ifelse 113 114                | ifelse True_113 EndIf_114
02 | 0681 .00 addr:685
ad | 0682 .71 
02 | 0683 .00 addr:710
c6 | 0684 .72 
e0 | 0685 e0 set16_c ubyte 97 3            | msgTopo.type = 3
61 | 0686 61 
03 | 0687 03 
f4 | 0688 f4 set_v ushort 98 85            | msgTopo.source = nodeId
62 | 0689 62 
55 | 0690 55 
e5 | 0691 e5 set16_c ushort 100 0xffff     | msgTopo.target = 0xffff
64 | 0692 64 
ff | 0693 ff 
ff | 0694 ff 
28 | 0695 28 push_c 93                     | push &seqReq
5d | 0696 5d 
59 | 0697 59 inc ushort                    | inc ushort
f4 | 0698 f4 set_v ushort 108 93           | msgTopo.d16_2 = seqReq
6c | 0699 6c 
5d | 0700 5d 
28 | 0701 28 push_c 97                     | push_c &msgTopo:usrMsg2_t
61 | 0702 61 
19 | 0703 19 func 10                       | func qPut
0a | 0704 0a 
20 | 0705 20 popx ubyte 89                 | pop stat
59 | 0706 59 
75 | 0707 75 exec 114                      | goto  114
02 | 0708 .00 addr:710
c6 | 0709 .72 
75 | 0710 75 exec 106                      | goto  106
02 | 0711 .00 addr:669
9d | 0712 .6a 
78 | 0713 78 memclr 54 2                   | clear EXT gates for CUSTOM_A
36 | 0714 36 
02 | 0715 02 
75 | 0716 75 exec 116                      | goto  116
02 | 0717 .00 addr:719
cf | 0718 .74 
01 | 0719 01 end                           | end
e0 | 0720 e0 set16_c ubyte 172 1           | ack = 1
ac | 0721 ac 
01 | 0722 01 
e0 | 0723 e0 set16_c ubyte 173 0           | reply = 0
ad | 0724 ad 
00 | 0725 00 
e5 | 0726 e5 set16_c ushort 82 122         | await Q_READY[0]
52 | 0727 52 
02 | 0728 .00 addr:731
db | 0729 .7a 
01 | 0730 01 end                           | end
28 | 0731 28 push_c 0                      | push 0
00 | 0732 00 
19 | 0733 19 func 12                       | func qSize
0c | 0734 0c 
14 | 0735 14 gt                            | gt
7f | 0736 7f ifelse 154 155                | ifelse True_154 False_155
02 | 0737 .00 addr:741
e5 | 0738 .9a 
03 | 0739 .00 addr:869
65 | 0740 .9b 
e0 | 0741 e0 set16_c ubyte 173 0           | reply = 0
ad | 0742 ad 
00 | 0743 00 
28 | 0744 28 push_c 122                    | push_c &msgRadio:usrMsg2_t
7a | 0745 7a 
19 | 0746 19 func 11                       | func qGet
0b | 0747 0b 
20 | 0748 20 popx ubyte 89                 | pop stat
59 | 0749 59 
29 | 0750 29 push_c 0xffff                 | push 0xffff
ff | 0751 ff 
ff | 0752 ff 
28 | 0753 28 push_c 125                    | push msgRadio.target
7d | 0754 7d 
95 | 0755 95 deref ushort                  | deref ushort
10 | 0756 10 eq                            | eq
7f | 0757 7f ifelse 151 152                | ifelse True_151 False_152
02 | 0758 .00 addr:762
fa | 0759 .97 
03 | 0760 .00 addr:778
0a | 0761 .98 
71 | 0762 71 outevtx_v 40 122              | emit SEND len=25 var=msgRadio
28 | 0763 28 
7a | 0764 7a 
28 | 0765 28 push_c 122                    | push msgRadio.type
7a | 0766 7a 
94 | 0767 94 deref ubyte                   | deref ubyte
20 | 0768 20 popx ubyte 58                 | evt SEND_DONE() auxId = pop
3a | 0769 3a 
e5 | 0770 e5 set16_c ushort 59 131         | await SEND_DONE()[0]
3b | 0771 3b 
03 | 0772 .00 addr:775
07 | 0773 .83 
01 | 0774 01 end                           | end
75 | 0775 75 exec 153                      | goto  153
03 | 0776 .00 addr:866
62 | 0777 .99 
38 | 0778 38 pushx_v ubyte 173             | push reply:ubyte
ad | 0779 ad 
28 | 0780 28 push_c 127                    | push msgRadio.d8_1
7f | 0781 7f 
94 | 0782 94 deref ubyte                   | deref ubyte
07 | 0783 07 add                           | add
20 | 0784 20 popx ubyte 127                | pop msgRadio.d8_1
7f | 0785 7f 
71 | 0786 71 outevtx_v 41 122              | emit SEND_ACK len=25 var=msgRadio
29 | 0787 29 
7a | 0788 7a 
28 | 0789 28 push_c 122                    | push msgRadio.type
7a | 0790 7a 
94 | 0791 94 deref ubyte                   | deref ubyte
20 | 0792 20 popx ubyte 63                 | evt SEND_DONE_ACK() auxId = pop
3f | 0793 3f 
e5 | 0794 e5 set16_c ushort 64 141         | await SEND_DONE_ACK()[0]
40 | 0795 40 
03 | 0796 .00 addr:799
1f | 0797 .8d 
01 | 0798 01 end                           | end
50 | 0799 50 getextdt_v 172 1              | getExtData ack 1
ac | 0800 ac 
01 | 0801 01 
28 | 0802 28 push_c 173                    | push &reply
ad | 0803 ad 
58 | 0804 58 inc ubyte                     | inc ubyte
28 | 0805 28 push_c 20                     | push 20
14 | 0806 14 
38 | 0807 38 pushx_v ubyte 173             | push reply:ubyte
ad | 0808 ad 
14 | 0809 14 gt                            | gt
7f | 0810 7f ifelse 145 146                | ifelse True_145 EndIf_146
03 | 0811 .00 addr:815
2f | 0812 .91 
03 | 0813 .00 addr:830
3e | 0814 .92 
e5 | 0815 e5 set16_c ushort 91 0xfffe      | father = 0xfffe
5b | 0816 5b 
ff | 0817 ff 
fe | 0818 fe 
68 | 0819 68 outevt_c 20 1                 | emit REQ_CUSTOM_A len=1 const=1
14 | 0820 14 
01 | 0821 01 
87 | 0822 87 tkins_z 1 17 134              | insert track Loop_out_134 tree 17
11 | 0823 11 
03 | 0824 .00 addr:857
59 | 0825 .86 
01 | 0826 01 end                           | end
75 | 0827 75 exec 146                      | goto  146
03 | 0828 .00 addr:830
3e | 0829 .92 
28 | 0830 28 push_c 1                      | push 1
01 | 0831 01 
38 | 0832 38 pushx_v ubyte 172             | push ack:ubyte
ac | 0833 ac 
10 | 0834 10 eq                            | eq
7f | 0835 7f ifelse 148 149                | ifelse True_148 EndIf_149
03 | 0836 .00 addr:840
48 | 0837 .94 
03 | 0838 .00 addr:848
50 | 0839 .95 
87 | 0840 87 tkins_z 1 17 134              | insert track Loop_out_134 tree 17
11 | 0841 11 
03 | 0842 .00 addr:857
59 | 0843 .86 
01 | 0844 01 end                           | end
75 | 0845 75 exec 149                      | goto  149
03 | 0846 .00 addr:848
50 | 0847 .95 
a4 | 0848 a4 clken_c 5 50 150              | clock enable Awake_50_150 50msec
05 | 0849 05 
32 | 0850 32 
03 | 0851 .00 addr:854
56 | 0852 .96 
01 | 0853 01 end                           | end
75 | 0854 75 exec 132                      | goto  132
03 | 0855 .00 addr:778
0a | 0856 .84 
78 | 0857 78 memclr 40 8                   | clear WClocks gates from 5 to 6
28 | 0858 28 
08 | 0859 08 
78 | 0860 78 memclr 63 2                   | clear EXT gates for SEND_DONE_ACK()
3f | 0861 3f 
02 | 0862 02 
75 | 0863 75 exec 153                      | goto  153
03 | 0864 .00 addr:866
62 | 0865 .99 
75 | 0866 75 exec 156                      | goto  156
03 | 0867 .00 addr:877
6d | 0868 .9c 
87 | 0869 87 tkins_z 1 10 125              | insert track Loop_out_125 tree 10
0a | 0870 0a 
03 | 0871 .00 addr:880
70 | 0872 .7d 
01 | 0873 01 end                           | end
75 | 0874 75 exec 156                      | goto  156
03 | 0875 .00 addr:877
6d | 0876 .9c 
75 | 0877 75 exec 123                      | goto  123
02 | 0878 .00 addr:731
db | 0879 .7b 
78 | 0880 78 memclr 40 8                   | clear WClocks gates from 5 to 6
28 | 0881 28 
08 | 0882 08 
78 | 0883 78 memclr 58 2                   | clear EXT gates for SEND_DONE()
3a | 0884 3a 
02 | 0885 02 
78 | 0886 78 memclr 63 2                   | clear EXT gates for SEND_DONE_ACK()
3f | 0887 3f 
02 | 0888 02 
75 | 0889 75 exec 119                      | goto  119
02 | 0890 .00 addr:726
d6 | 0891 .77 
78 | 0892 78 memclr 40 8                   | clear WClocks gates from 5 to 6
28 | 0893 28 
08 | 0894 08 
78 | 0895 78 memclr 58 2                   | clear EXT gates for SEND_DONE()
3a | 0896 3a 
02 | 0897 02 
78 | 0898 78 memclr 63 2                   | clear EXT gates for SEND_DONE_ACK()
3f | 0899 3f 
02 | 0900 02 
78 | 0901 78 memclr 82 2                   | clear EXT gates for Q_READY
52 | 0902 52 
02 | 0903 02 
01 | 0904 01 end                           | end
01 | 0905 01 end                           | end
78 | 0906 78 memclr 0 48                   | clear WClocks gates from 0 to 6
00 | 0907 00 
30 | 0908 30 
01 | 0909 01 end                           | end program
01 | 0910 01 end                           | end
