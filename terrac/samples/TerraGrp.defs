/*{-{*/
#ifndef _TERRAGRP_
#define _TERRAGRP_
config 
	name : TerraGrp ,
	code:00.02.00 , 
	{
		tossim: 576,
		telosb_full: 4800,
		telosb_hyb: 768,
		micaz : 768,
		mica2 : 768,
	} 
do
/*
 * ATENTION: DO NOT use comments with '/**', always use only one star!
 * Actual compiler has a bug to identifier this type of comments. 
 */
 
/*
 * Define constants
 */

// error_t
#define SUCCESS 0 
     // FAIL > 0
// Boolean
#define TRUE 1
#define FALSE 0
// Leds Constants
#define ON 1
#define OFF 0
#define TOGGLE 2
// Interrupt config
#define RISING 1
#define FALLING 0
#define DISABLE 2
// Port Cfg
#define pIN 0
#define pOUT 1
// Message
#define BROADCAST 0xffff
#define SEND_DATA_SIZE 16
// VM Error codes
#define E_DIVZERO 10 // Division by zero
#define E_IDXOVF  11 // Array index overflow
#define E_STKOVF  20 // Stack overflow -- fatal

// Operations
#define opLT 1
#define opLTE 2
#define opGT 3
#define opGTE 4
#define opEQ 5
#define opNEQ 6
// Aggreg Functions
#define fAVG 0
#define fSUM 1
#define fMAX 2
#define fMIN 3
#define fRESERV 5
// Aggreg Sensor IDs
#define SID_TEMP	1
#define SID_PHOTO	2
#define SID_LEDS	3
#define SID_VOLT	4
#define SID_PORT_A	5
#define SID_PORT_B	6
#define SID_INT_A	7
#define SID_INT_B	8
// Port Cfg
#define	pIN	0
#define	pOUT	1

// Group Election Status
#define eACTIVE 1
#define ePASSIVE 2
#define eOFF 3


/*
 * Define custom registers
 */

	// Group control structure
	regtype group_t with
		var ubyte   grId;
		var ubyte   param;
		var ubyte   nhops;
		var ubyte   status;
		var ubyte   elFlag;
		var ubyte   elState;
		var ushort  leader;
		var ushort	nextGrp;
	end
	
	// Aggregation control structure
	regtype aggreg_t with
		var ubyte   agId;
		var ushort  seq;
		var ubyte   grId;
		var ubyte   sensorId;
		var ubyte   agOper;
		var ubyte   agComp;
		var ulong   refVal;	
		var ushort	nextAgg;
	end

	// AggregDone data structure
	regtype aggDone_t with
		var ubyte  agId;
		var ushort count;
		var ushort countTrue;
		var ushort countFalse;
		var ulong  value;
	end
	
	// msgBS_t
	packet msgBS_t with
		var ubyte msgId;
		var payload[SEND_DATA_SIZE] data;
	end

	// msgGR_t 
	packet msgGR_t with
		var ubyte  grId;
		var ushort node;
		var ubyte  msgId;
		var payload[SEND_DATA_SIZE] data;
	end
		
	// TerraNet local Output events
//	output void		INIT			ubyte 0;
	output void		LEDS			ubyte 5;
	output void		LED0			ubyte 6;
	output void		LED1			ubyte 7;
	output void		LED2			ubyte 8;
	output void		REQ_TEMP		void 9;
	output void		REQ_PHOTO		void 10;
	output void		REQ_VOLTS		void 11;
	output void		SET_PORT_A		ubyte 12;
	output void		SET_PORT_B		ubyte 13;
	output void 	CFG_PORT_A		ubyte 14;
	output void 	CFG_PORT_B		ubyte 15;
	output void 	REQ_PORT_A		ubyte 16;
	output void 	REQ_PORT_B		ubyte 17;
	output void 	CFG_INT_A		ubyte 18;
	output void 	CFG_INT_B		ubyte 19;
	output void 	REQ_CUSTOM_A	ubyte 20;
	output void		REQ_MIC			void  21;
	output void		BEEP			ushort  22;

	// TerraNet Custom Output events
	output void 	SEND_BS		msgBS_t	 40;
	output void 	SEND_GR		msgGR_t	 41;
	output void 	AGGREG		aggreg_t 42;

	// TerraNet Local Input events
	input ubyte 	ERROR 		 	ubyte 	0;
	input ubyte 	ERROR 			void	1;
	input ushort 	TEMP 			void 	5;
	input ushort 	PHOTO 			void 	6;
	input ushort	VOLTS 			void 	7;
	input ubyte 	PORT_A 			void 	8;
	input ubyte 	PORT_B 			void 	9;
	input ubyte 	INT_A 			void 	10;
	input ubyte 	INT_B 			void 	11;
	input ubyte 	CUSTOM_A_ID		ubyte 	12;
	input ubyte 	CUSTOM_A 		void 	13;
	input ubyte 	MIC 			void 	14;

	// TerraGrp input events
	input msgGR_t 		REC_GR		ubyte 	40;
	input msgGR_t 		REC_GR			void 	41;
	input ushort 		SENDBS_DONE 	ubyte 	42;
	input ushort 		SENDBS_DONE 	void 	43;
	input aggDone_t 	AGGREG_DONE	ubyte 	44;
	input aggDone_t 	AGGREG_DONE		void 	45;
	input ushort 		LEADER_NEW 	ubyte 	46;
	input ushort 		LEADER_NEW 	void 	47;
	input ushort 		LEADER_LOST 	ubyte 	48;
	input ushort 		LEADER_LOST 	void 	49;
	input ushort 		SENDGR_DONE 	ubyte 	50;
	input ushort 		SENDGR_DONE 	void 	51;


	// Terra basic functions
	function pure ushort getNodeId()	0;
	function pure ushort random()		1;
	// TerraGrp Custom functions
	//                    groupInit(RegName,    Id, param, nhops, status, elFlag, leader)
	function nohold ubyte groupInit(group_t, ubyte, ubyte, ubyte,  ubyte,  ubyte, ushort)	10;
	//       		aggregInit( RegName,  grName, sensorId, agOper, agComp, refVal)
	function nohold ubyte aggregInit(aggreg_t, group_t,    ubyte,  ubyte,  ubyte,  ulong)	11;
	//
	function ubyte setupMic(ushort*,ushort,ulong,ubyte)			16;
	function ubyte setRFPower(ubyte)			17;

// Request/await macros
#define getTemp(var)  emit REQ_TEMP();  var=await TEMP 
#define getPhoto(var) emit REQ_PHOTO(); var=await PHOTO 
#define getVolts(var) emit REQ_VOLTS(); var=await VOLTS 
// await/until macro
#define await_until(ret,evt,cond) loop do ret = await evt; if cond then break; end end

end
#endif
/*}-}*/
