#include "TerraNet.defs"

// No father id
#define NO_FATHER 0xfffe

// Messages Types
#define ID_NEW_TOPO 1
#define ID_DATA 2
#define ID_REQ_TOPO 3

// Define Node Id
var ushort nodeId = getNodeId();

// Automatic base node setup - Avrora use 2 (nodes 0..9), TOSSIM use 11 (node 11..xx)
var ushort baseNode = 2;
if nodeId > 10 then
	baseNode = 11;
end

var ubyte stat,hop;
var ushort father=NO_FATHER;
var ushort seqReq=0;
var ubyte  seqData=0;
var ubyte  reqTopoBlind=FALSE;


var usrMsg2_t msgTopo;
var usrMsg2_t msgRadio;

/*
msgData id=2:
- d8_1  : #replies
- d8_2  : reqTopoBlind
- d8_3  : seqData
- d8_4  : ------
- d16_1 : sensor
- d16_2 : ------
- d16_3 : nodeId
- d16_4 : father
- d32_1 : ------
- d32_2 : ------
*/
/*
reqTopo id=3:
- d8_1  : #replies
- d8_2  : ------
- d8_3  : ------
- d8_4  : ------
- d16_1 : ------
- d16_2 : seqReq
- d16_3 : ------
- d16_4 : ------
- d32_1 : ------
- d32_2 : ------
*/

/*
newTopo id=1:
- d8_1  : #replies
- d8_2  : #hops
- d8_3  : ------
- d8_4  : ------
- d16_1 : ------
- d16_2 : seqReq
- d16_3 : ------
- d16_4 : ------
- d32_1 : ------
- d32_2 : ------
*/

var usrMsg2_t msgData;
msgData.type = ID_DATA;
msgData.source = nodeId;
msgData.d16_3 = nodeId;

msgTopo.source = nodeId;

if nodeId == baseNode then
	father = 1;
	seqReq = 1;
end

par do
/**********************************************************
 * Send temperatura value
 **********************************************************/
	await 2s;
	emit REQ_CUSTOM_A(1);
	loop do
		par/or do
			await 30s;
		with
			await 10s;
			emit REQ_TEMP();
			msgData.d16_1 = await TEMP;
			if father != NO_FATHER then
				msgData.target = father;
				inc seqData;
				emit LEDS(seqData);
				msgData.d8_3 = seqData;
				msgData.d16_4 = father;
				msgData.d8_2 = reqTopoBlind;
				await (nodeId*100)ms;
				stat = qPut(msgData);
			else
				emit REQ_CUSTOM_A(1);
			end
			await FOREVER;
		end
	end
with 
	/**************************
	 * Data msg to root
	 **************************/
	loop do
		msgTopo = await RECEIVE(ID_DATA);  	// Received a data Msg, then root it.
		if father != NO_FATHER then
			msgTopo.target = father;
			stat = qPut(msgTopo);
		end
	end
with
	if nodeId != baseNode then
		par do
			/**************************
			 * New topology msg(1) to broadcast
			 **************************/
			loop do
				msgTopo = await RECEIVE(ID_NEW_TOPO);
				if msgTopo.d16_2 > seqReq then
					reqTopoBlind = FALSE;
					seqReq = msgTopo.d16_2;
					father = msgTopo.source;
					inc msgTopo.d8_2;
					hop = msgTopo.d8_2;
					msgTopo.source = nodeId;
					stat = qPut(msgTopo);
				end
			end
		with
			/**************************
			 * Request new topology msg(3) to root
			 **************************/
			loop do
				msgTopo = await RECEIVE(ID_REQ_TOPO);
				if (father != NO_FATHER) and (reqTopoBlind==FALSE) then
					//reqTopoBlind = TRUE;
					msgTopo.target = father;
					stat = qPut(msgTopo);
				end
			end
		end
	else // nodeId == baseNode
		/**************************
		 * When receive Request Topo(3), Starts a new topology
		 **************************/
		loop do
			msgTopo = await RECEIVE(ID_REQ_TOPO); // Start new topology
			msgTopo.type = ID_NEW_TOPO;
			msgTopo.source = nodeId;
			msgTopo.target = BROADCAST;
			msgTopo.d8_2 = 0;
			inc seqReq;
			msgTopo.d16_2 = seqReq;
			stat = qPut(msgTopo);
			await 2s; // Ignores recent requests
		end
	end
with
/**********************************************************
 * Node != baseNode - If father==0, Requests a new toplogy
 **********************************************************/
	if nodeId != baseNode then
		loop do
			await CUSTOM_A;
			if father == NO_FATHER then
				msgTopo.type = ID_REQ_TOPO;
				msgTopo.source = nodeId;
				msgTopo.target = BROADCAST;
				inc seqReq;
				msgTopo.d16_2 = seqReq;
				stat = qPut(msgTopo);
			end
		end
	end
with
/**********************************************************
 * Dequeue and send to radio
 **********************************************************/
	var ubyte ack=TRUE;
	var ubyte reply=0;
	loop do
		await Q_READY; 
		loop do
			if qSize() > 0 then
				reply=0;
				stat = qGet(&msgRadio);
				if msgRadio.target == BROADCAST then
					emit SEND(msgRadio);
					await SEND_DONE(msgRadio.type);
				else
					loop do
						msgRadio.d8_1 = msgRadio.d8_1 + reply;
						emit SEND_ACK(msgRadio);
						ack = await SEND_DONE_ACK(msgRadio.type);
						inc reply;
						if reply > 20 then
							father = NO_FATHER;
							emit REQ_CUSTOM_A(1);
							break;
						end
						if ack==TRUE then
							break;
						end
						await 50ms; //200ms;
					end
				end
			else
				break;
			end
		end
	end
end

//  avrora -platform=micaz -simulation=sensor-network -seconds=305 -monitors=real-time,serial -ports=1:0:9001 -colors=false -nodecount=3   main.elf


