#include "TerraNet.defs"

pktype msg of radioMsg with
	var byte[4] data1;
end
var msg a;
a = await RECEIVE(1);


//var ushort x = await TEMP(1);

/*
var byte[4] x;
var byte a;
	emit LEDS(a);

regtype sss with
	var byte data;
end


/*
pktype msg of radioMsg with
	var byte data1;
end
var msg a;
a.type=1;
a.target=1;


loop idx, 8 do
	await 2s;
	emit LEDS(idx);
	a.data1= idx;
	emit SEND(a);
	await SEND_DONE_ANY();
//	x[idx]=idx;
end
x[2]=0;
x[0] = x[1]/x[2];


/*
var long a1;
var usrMsg_t msg;

await SEND_DONE(msg.type);
await TEMP;
await SEND_DONE(2);
await TEMP;
await SEND_DONE_ACK(3);

//await SEND_DONE(10,a1);


/*
regtype radio_t with
   var ubyte	code;
   var ushort   target;
   var byte[23] data;
 end 

 regtype usr_t with
   var ushort tempVal; 
   var ushort photoVal;
 end 

var usrMsg_t radio;
var ulong v1;
var ulong* v1_p;
var ubyte* v2_p;
var radio_t msg;
var radio_t* msg_p;
var usr_t usr;
var usr_t* usr_p;
var ubyte[10] buffer;


/*
par/or  do
do
	buffer[0]=0;
	var ushort node = qGet(&msg);
	await 1s;
	buffer[1]=1;
//finally
	buffer[2]=2;
end
with
	await 10s;
end
*/

/*
v1_p = &v1;
v1 = *v1_p;
v1_p = msg.data; 	// WRN: 4 < 10
v1 = msg.data[0];
msg.data[0] = v1; 	// WRN: 1 < 4
// v1_p = &msg.data[0]; // ERR: 4 > 1
v1_p = buffer;		// WRN: 4 < 10
usr_p = msg.data;	// WRN: 4 < 10
usr_p = buffer;		// WRN: 4 < 10
msg.target = v1;	// WRN: 2 < 4
msg.data[3] = buffer[1];
msg.data[v1] = buffer[1];
usr_p.tempVal = v1;	// WRN: 2 < 4
usr_p.tempVal = *v1_p;	// WRN: 2 < 4

// usr.photoVal = msg_p.data[0]; // ERR: pointer not initialized
msg_p = &msg;
usr_p = msg_p;	// WRN: 4 < 13
usr.photoVal = msg_p.data[0];
v2_p = &msg_p.data[0];

usr_p.tempVal = await TEMP;


/*

regtype user_reg with
	var ubyte d8_1;
	var ubyte d8_2;
	var ubyte d8_3;
	var ubyte d8_4;
	var ushort d16_1;
	var ushort d16_2;
	var ushort d16_3;
	var ushort d16_4;
	var ulong d32_1;
	var ulong d32_2;
end

regtype user_reg2 with
	var ubyte[20] data;
end

var usrMsg_t* msgp;
var usrMsg_t msg;
var usrMsg2_t msg2;
var usrMsg2_t* msg2p;
var user_reg data;
var user_reg data2;
var user_reg* datap;
var ubyte[20] vetor;
var ubyte[20] vetorp;
var ushort x;
var ubyte* xp;
event long ee;

var user_reg2 data5;
var user_reg2* data5p;
var ubyte zz;




do
par do
	 zz=
	//async (x) 
	do 
		x = getNodeId();
		//await 500ms;
		x = 7;
	return 17;
	finally
		x = 9;
	return 17;
	end;
with
	await 1s;
	return 18;
end;
end;
/*
var ulong x4;
var ulong* x4_p;
var ubyte x1;
var ubyte* x1_p;
x1_p = &x4;
x4_p = &x1;
*/

//vetorp[1] = x;

//msgp = &msg;
//datap = msgp;

/*
do
var user_reg* datap;
datap = msgp;

end
*/

//await_until(x,ee,x>10);
//await_until(msg,RECEIVE,msg.type==1);

//x = 100000;

//msg.data = vetor;

//datap = msg.data;
//msg = data;
//data = msg;
//emit REQ_TEMP();

//emit LEDS(vetor[0]);


//msgp=&msg2;
//emit SEND(&msg);

//x = sizeof<long> * 2;

//data = await RECEIVE;
//vetor = data;
//vetorp[2] = await TEMP;
//*xp = await TEMP;

//xp = &vetor[1];
//xp = &vetor[0];
//xp = &vetorp[0];

//vetorp[2] = &vetor[1];
//data5 = datap;
//datap = &data5;
//xp = data5;

//x = 1000;
//datap = vetor;
//datap = msg.data;

//vetor[2] = x;
//data2 = x;
//data2 = msg.data;
//data2 = vetor[1];

//vetor = data2;

//x = vetor[1];
//vetor[1] = vetor[x+1];
//x = data2.d16_2;
//data2.d16_2 = x;
//x = msg.data[1];


/*

var ubyte x1;
var ubyte* x1p;
x1p=&x1;

msgp = &msg;


msg.data[0] = 10;

vetor[0] = 1;
vetor[3] = 2;

vetor[4] = 0;
vetor[5] = 3;


msg.data[0] = 10;
inc msg.data[0];

msg.data = vetor;

inc msg.data[0];
inc msg.data[3];
inc msg.data[4];
inc msg.data[5];

data = vetor;
data = msg.data;
msg.data = vetor;


msg2 = msg;

datap = msg.data;
msg = await RECEIVE;


data.d8_1 = 0;
data.d8_2 = 15;
data.d16_1 = 1000;
data.d32_1 = 1<<17;

msg.type=2;
msg.source=11;
msg.target=1;

event byte fila;

/*
*/








