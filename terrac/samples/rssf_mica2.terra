#include "TerraNet.defs"

//setRFPower(1);

#define REQ_TOPO 3
#define DATA 1
#define NEW_TOPO 2

#define ROOT 1
#define PERIOD 150

var ubyte count=0;
var ubyte tcount=0;
var ubyte failCount=0;
var ubyte stat;
var ubyte lastReqTopo=0;

var ushort nodeid = getNodeId();
#define NO_FATHER 200
var ushort parentid=NO_FATHER;

pktype usrMsg from radioMsg with
	var ubyte[4] d8;
	var ushort[4] d16;
	var ulong[2] d32;
end

var usrMsg sdata;
var usrMsg fdata;
var usrMsg xdata;
var usrMsg topo;
var usrMsg rtopo;
var usrMsg xtopo;
var usrMsg msgRadio;

sdata.type=DATA;
sdata.target=NO_FATHER;
sdata.source=nodeid;
sdata.d8[1]=0;
sdata.d8[2]=0;

topo.type=NEW_TOPO;
topo.target=BROADCAST;
topo.source=nodeid;
topo.d8[1]=0;
topo.d8[2]=0;

var ulong delay = ((nodeid & 0x07ff) * 20) + 1000 ;
qClear();

emit LEDS(0);
//emit LED1(ON);
// Controls the NewTopo proccess
par do
	if nodeid == ROOT then
		parentid = 0;
		// RootNode: Send topo at each received request. 
		loop do
			rtopo = await RECEIVE(REQ_TOPO);
//emit LED2(ON);
			topo.d16[3] = rtopo.d16[3];
			inc tcount;
			topo.d8[0]=tcount;
			stat = qPut(topo);
			await 3s; // Avoid successive requests.
		end
	else
		par do
			// Non RootNodes: Receives a newTopo message and forward it.
			// If necessary, update its parent id.
			loop do
				rtopo=await RECEIVE(NEW_TOPO);
				if parentid == NO_FATHER then
					parentid = rtopo.source;
				end
				rtopo.source=nodeid;
				stat = qPut(rtopo);
				await 5s; // Avoids simultaneous neighbors messages.
			end
		with
			// Non RootNodes: Receives a reqTopo message and forward it.
			loop do
				xdata=await RECEIVE(REQ_TOPO);
				if parentid != NO_FATHER then
					lastReqTopo = xdata.d8[1];
					xdata.target = parentid;
					stat = qPut(xdata);
				end
			end
		end
	end
with
	await (delay)ms;
	loop do
		if parentid != NO_FATHER then
			emit REQ_TEMP;
			sdata.d16[0] = await TEMP;	
			emit REQ_PHOTO;
			sdata.d16[1] = await PHOTO;
			emit REQ_VOLTS;
			sdata.d16[2] = await VOLTS;
			inc sdata.d8[0];
			sdata.d8[2]=0; //Retries
			sdata.target = parentid;
			sdata.d8[0]=count;
			sdata.d16[3]=nodeid;
			stat = qPut(sdata);
			await (PERIOD)s;
		else
			await 30s;
			if nodeid != ROOT then
				xtopo.type = REQ_TOPO;
				xtopo.source =  nodeid;
				inc lastReqTopo;
				xtopo.d8[1] = lastReqTopo;
				xtopo.d16[3] = nodeid;
				xtopo.target=BROADCAST;
				stat = qPut(xtopo);			
			end
		end
emit LED1(TOGGLE);
	end
with
	loop do
		fdata=await RECEIVE(DATA);
//emit LED1(TOGGLE);
		if fdata.source != parentid then
			inc fdata.d8[1];
			if nodeid == ROOT then
				fdata.source = fdata.d16[3];
			else
				fdata.source = nodeid;
			end
			fdata.target = parentid;
			stat = qPut(fdata);
		end
	end
with
/**********************************************************
 * Dequeue and send to radio
 **********************************************************/
	var ubyte ack=TRUE;
	var ubyte reply=0;
	loop do
		await Q_READY;
		loop do
			if qSize() > 0 then
				reply=0;
				stat = qGet(msgRadio);
				if msgRadio.target == BROADCAST or msgRadio.target == 0 or (msgRadio.target>>11 != nodeid>>11) then
					emit SEND(msgRadio);
					await SEND_DONE(msgRadio.type);
				else
					msgRadio.d8[2] = msgRadio.d8[2] + reply;
					emit SEND_ACK(msgRadio);
					ack = await SEND_DONE_ACK(msgRadio.type);
					// Compute number of fails
					// If fails, force to get new parent.
					if ack==FALSE then 
						if  msgRadio.type == DATA then
							inc failCount;
							if failCount > 2 and parentid != ROOT then 
								parentid = NO_FATHER; 
								failCount = 0;
							end
						end
					else
						failCount = 0;
					end
				end
				await 100ms;
			else
emit LED2(TOGGLE);
				break;
			end
		end
	end
with
	var byte qCounter = 0;
	loop do
		loop i, qSize() do
			emit LED0(ON);
			await 100ms;			
			emit LED0(OFF);
			await 100ms;
			inc qCounter;
			if qCounter > 10 then qClear(); qCounter=0; end			
		end
		await 150ms;			
		emit LED0(ON);
		await 150ms;			
		emit LED0(OFF);
		await 700ms;
	end
end

