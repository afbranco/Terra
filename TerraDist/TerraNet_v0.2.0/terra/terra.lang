<?xml version="1.0" encoding="UTF-8"?>
<!--

 This file is part of GtkSourceView

 Authors: Marco Barisione, Emanuele Aina
 Copyright (C) 2005-2007 Marco Barisione <barisione@gmail.com>
 Copyright (C) 2005-2007 Emanuele Aina

 GtkSourceView is free software; you can redistribute it and/or
 modify it under the terms of the GNU Lesser General Public
 License as published by the Free Software Foundation; either
 version 2.1 of the License, or (at your option) any later version.

 GtkSourceView is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public
 License along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

-->
<language id="terranet" _name="TerraNet" version="2.0" _section="Script">
  <metadata>
    <property name="mimetypes">text/x-c;text/x-csrc;image/x-xpixmap</property>
    <property name="globs">*.terra</property>
    <property name="line-comment-start">//</property>
    <property name="block-comment-start">/*</property>
    <property name="block-comment-end">*/</property>
  </metadata>

  <styles>
    <style id="comment"           _name="Comment"               map-to="def:comment"/>
    <style id="string"            _name="String"                map-to="def:string"/>
    <style id="preprocessor"      _name="Preprocessor"          map-to="def:preprocessor"/>
    <style id="common-defines"    _name="Common Defines"        map-to="def:special-constant"/>
    <style id="events"            _name="Events"                map-to="def:constant"/>
    <style id="included-file"     _name="Included File"         map-to="def:string"/>
    <style id="char"              _name="Character"             map-to="def:character"/>
    <style id="keyword"           _name="Keyword"               map-to="def:keyword"/>
    <style id="operator"          _name="Operator"              map-to="def:operator"/>
    <style id="type"              _name="Data Type"             map-to="def:type"/>
    <style id="storage-class"     _name="Storage Class"         map-to="def:type"/>
    <style id="printf"            _name="printf Conversion"     map-to="def:special-char"/>
    <style id="escaped-character" _name="Escaped Character"     map-to="def:special-char"/>
    <style id="floating-point"    _name="Floating point number" map-to="def:floating-point"/>
    <style id="decimal"           _name="Decimal number"        map-to="def:decimal"/>
    <style id="octal"             _name="Octal number"          map-to="def:base-n-integer"/>
    <style id="hexadecimal"       _name="Hexadecimal number"    map-to="def:base-n-integer"/>
    <style id="boolean"           _name="Boolean value"         map-to="def:boolean"/>
  </styles>

  <definitions>

    <!--regexs-->
    <define-regex id="preproc-start">^\s*@\s*</define-regex>
    <define-regex id="escaped-character" extended="true">
      \\(                   # leading backslash
      [\\\"\'nrbtfav\?] |   # escaped character
      [0-7]{1,3} |          # one, two, or three octal digits
      x[0-9A-Fa-f]+         # 'x' followed by hex digits
      )
    </define-regex>

    <!--contexts NOT used on the main context-->
    <!-- TODO: what about scanf ? -->
    <!-- man 3 printf -->
    <context id="printf" style-ref="printf" extend-parent="false">
      <match extended="true">
        \%\%|\%
        (?:[1-9][0-9]*\$)?      # argument
        [#0\-\ \+\'I]*          # flags
        (?:[1-9][0-9]*|\*)?     # width
        (?:\.\-?(?:[0-9]+|\*))? # precision
        (?:hh|ll|[hlLqjzt])?    # length modifier
        [diouxXeEfFgGaAcsCSpnm] # conversion specifier
      </match>
    </context>

    <!--contexts used on the main context-->
    <!-- Preprocessor -->
    <context id="if0-comment" style-ref="comment">
      <start>\%{preproc-start}if\b\s*0\b</start>
      <end>\%{preproc-start}(endif|else|elif)\b</end>
      <include>
        <context id="if-in-if0">
          <start>\%{preproc-start}if(n?def)?\b</start>
          <end>\%{preproc-start}endif\b</end>
          <include>
            <context ref="if-in-if0"/>
            <context ref="def:in-comment"/>
          </include>
        </context>
        <context ref="def:in-comment"/>
      </include>
    </context>

    <context id="include" style-ref="preprocessor">
      <match extended="true">
        \%{preproc-start}
        (include|import)\s*
        ((.*?)|&lt;.*&gt;)
      </match>
      <include>
        <context id="included-file" sub-pattern="2" style-ref="included-file"/>
      </include>
    </context>

    <context id="preprocessor" style-ref="preprocessor" end-at-line-end="true">
      <start extended="true">
        \%{preproc-start}
        (define|undef|error|pragma|ident|if(n?def)?|else|elif|endif|line|warning)
        \b
      </start>
      <include>
        <context ref="def:line-continue" ignore-style="true"/>
        <context ref="string" ignore-style="true"/>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
      </include>
    </context>

    <context id="string" style-ref="string" end-at-line-end="true" class="string" class-disabled="no-spell-check">
      <start>L?"</start>
      <end>"</end>
      <include>
        <context ref="printf"/>
        <context id="escaped-character" style-ref="escaped-character">
          <match>\%{escaped-character}</match>
        </context>
        <context ref="def:line-continue"/>
      </include>
    </context>

    <context id="char" style-ref="char">
      <match>L?'(\%{escaped-character}|.)'</match>
    </context>

    <!-- http://www.lysator.liu.se/c/ANSI-C-grammar-l.html -->
    <context id="float" style-ref="floating-point">
      <match extended="true">
        (?&lt;![\w\.])
        ((\.[0-9]+ | [0-9]+\.[0-9]*) ([Ee][+-]?[0-9]*)? |
         ([0-9]+[Ee][+-]?[0-9]*))
        [fFlL]?
        (?![\w\.])
      </match>
    </context>

    <context id="hexadecimal" style-ref="hexadecimal">
      <match extended="true">
        (?&lt;![\w\.])
        0[xX][a-fA-F0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="octal" style-ref="octal">
      <match extended="true">
        (?&lt;![\w\.])
        0[0-7]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="decimal" style-ref="decimal">
      <match extended="true">
        (?&lt;![\w\.])
        [0-9]+[uUlL]*
        (?![\w\.])
      </match>
    </context>

    <context id="keywords" style-ref="keyword">
      <keyword>par/or</keyword>
      <keyword>par/and</keyword>
      <keyword>par</keyword>
      <keyword>do</keyword>
      <keyword>with</keyword>
      <keyword>end</keyword>
      <keyword>loop</keyword>
      <keyword>emit</keyword>
      <keyword>await</keyword>
      <keyword>if</keyword>
      <keyword>then</keyword>
      <keyword>else</keyword>
      <keyword>break</keyword>
      <keyword>var</keyword>
      <keyword>radioMsg</keyword>
      <keyword>async</keyword>
      <keyword>unsafe</keyword>
      <keyword>else/if</keyword>
      <keyword>finally</keyword>
      <keyword>FOREVER</keyword>
      <keyword>nohold</keyword>
      <keyword>not</keyword>
      <keyword>or</keyword>
      <keyword>pure</keyword>
      <keyword>return</keyword>
      <keyword>sizeof</keyword>
      <keyword>function</keyword>
      <keyword>config</keyword>
      <keyword>regtype</keyword>
      <keyword>inc</keyword>
      <keyword>dec</keyword>
      <keyword>pktype</keyword>
    </context>

    <context id="operators" style-ref="operator">
      <keyword>sizeof</keyword>
    </context>

    <context id="types" style-ref="type">
      <keyword>byte</keyword>
      <keyword>ubyte</keyword>
      <keyword>short</keyword>
      <keyword>ushort</keyword>
      <keyword>long</keyword>
      <keyword>ulong</keyword>
      <keyword>void</keyword>

    </context>

    <context id="storage-class" style-ref="storage-class">
      <keyword>auto</keyword>
      <keyword>const</keyword>
      <keyword>extern</keyword>
      <keyword>inline</keyword>
      <keyword>register</keyword>
      <keyword>restrict</keyword>
      <keyword>static</keyword>
      <keyword>volatile</keyword>
    </context>

    <!-- C99 booleans -->
    <context id="boolean" style-ref="boolean">
      <keyword>TRUE</keyword>
      <keyword>FALSE</keyword>
    </context>

    <context id="common-defines" style-ref="common-defines">
      <keyword>TRUE</keyword>
      <keyword>FALSE</keyword>
      <keyword>SUCCESS</keyword>
      <keyword>ON</keyword>
      <keyword>OFF</keyword>
      <keyword>TOGGLE</keyword>
      <keyword>RISING</keyword>
      <keyword>FALLING</keyword>
      <keyword>DISABLE</keyword>
      <keyword>pIN</keyword>
      <keyword>pOUT</keyword>
      <keyword>BROADCAST</keyword>
      <keyword>SEND_DATA_SIZE</keyword>
      <keyword>E_DIVZERO</keyword>
      <keyword>E_IDXOVF</keyword>
      <keyword>E_STKOVF</keyword>

      <keyword>SID_TEMP</keyword>
      <keyword>SID_PHOTO</keyword>
      <keyword>SID_LEDS</keyword>
      <keyword>SID_VOLT</keyword>
      <keyword>SID_PORT_A</keyword>
      <keyword>SID_PORT_B</keyword>
      <keyword>SID_INT_A</keyword>
      <keyword>SID_INT_B</keyword>
 
    </context>
    <context id="events" style-ref="events">
      <keyword>INIT</keyword>
      <keyword>LEDS</keyword>
      <keyword>LED0</keyword>
      <keyword>LED1</keyword>
      <keyword>LED2</keyword>
      <keyword>REQ_TEMP</keyword>
      <keyword>REQ_PHOTO</keyword>
      <keyword>REQ_VOLTS</keyword>
      <keyword>SEND</keyword>
      <keyword>SEND_ACK</keyword>
      <keyword>SET_PORT_A</keyword>
      <keyword>SET_PORT_B</keyword>
      <keyword>CFG_PORT_A</keyword>
      <keyword>CFG_PORT_B</keyword>
      <keyword>REQ_PORT_A</keyword>
      <keyword>REQ_PORT_B</keyword>
      <keyword>CFG_INT_A</keyword>
      <keyword>CFG_INT_B</keyword>
      <keyword>REQ_CUSTOM_A</keyword>

      <keyword>ERROR</keyword>
      <keyword>TEMP</keyword>
      <keyword>PHOTO</keyword>
      <keyword>VOLTS</keyword>
      <keyword>SEND_DONE</keyword>
      <keyword>SEND_DONE_ACK</keyword>
      <keyword>RECEIVE</keyword>
      <keyword>Q_READY</keyword>
      <keyword>PORT_A</keyword>
      <keyword>PORT_B</keyword>
      <keyword>INT_A</keyword>
      <keyword>INT_B</keyword>
      <keyword>CUSTOM_A</keyword>

      <keyword>getNodeId</keyword>
      <keyword>random</keyword>
      <keyword>qPut</keyword>
      <keyword>qGet</keyword>
      <keyword>qSize</keyword>
      <keyword>qClear</keyword>

    </context>

    <!--Main context-->
    <context id="terranet" class="no-spell-check">
      <include>
        <context ref="gtk-doc:inline-docs-section"/>
        <context ref="def:c-like-comment"/>
        <context ref="def:c-like-comment-multiline"/>
        <context ref="def:c-like-close-comment-outside-comment"/>
        <context ref="if0-comment"/>
        <context ref="include"/>
        <context ref="preprocessor"/>
        <context ref="string"/>
        <context ref="char"/>
        <context ref="float"/>
        <context ref="hexadecimal"/>
        <context ref="octal"/>
        <context ref="decimal"/>
        <context ref="keywords"/>
        <context ref="operators"/>
        <context ref="types"/>
        <context ref="storage-class"/>
        <context ref="boolean"/>
        <context ref="common-defines"/>
        <context ref="events"/>
      </include>
    </context>

  </definitions>
</language>
