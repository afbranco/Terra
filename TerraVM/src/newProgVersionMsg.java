/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'newProgVersionMsg'
 * message type.
 */

public class newProgVersionMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 26;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 160;

    /** Create a new newProgVersionMsg of size 26. */
    public newProgVersionMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new newProgVersionMsg of the given data_length. */
    public newProgVersionMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new newProgVersionMsg with the given data_length
     * and base offset.
     */
    public newProgVersionMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new newProgVersionMsg using the given byte array
     * as backing store.
     */
    public newProgVersionMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new newProgVersionMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public newProgVersionMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new newProgVersionMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public newProgVersionMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new newProgVersionMsg embedded in the given message
     * at the given base offset.
     */
    public newProgVersionMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new newProgVersionMsg embedded in the given message
     * at the given base offset and length.
     */
    public newProgVersionMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <newProgVersionMsg> \n";
      try {
        s += "  [versionId=0x"+Long.toHexString(get_versionId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [blockLen=0x"+Long.toHexString(get_blockLen())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [blockStart=0x"+Long.toHexString(get_blockStart())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [startProg=0x"+Long.toHexString(get_startProg())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [endProg=0x"+Long.toHexString(get_endProg())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nTracks=0x"+Long.toHexString(get_nTracks())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [wClocks=0x"+Long.toHexString(get_wClocks())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [asyncs=0x"+Long.toHexString(get_asyncs())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [wClock0=0x"+Long.toHexString(get_wClock0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [gate0=0x"+Long.toHexString(get_gate0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [inEvts=0x"+Long.toHexString(get_inEvts())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [async0=0x"+Long.toHexString(get_async0())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [appSize=0x"+Long.toHexString(get_appSize())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: versionId
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'versionId' is signed (false).
     */
    public static boolean isSigned_versionId() {
        return false;
    }

    /**
     * Return whether the field 'versionId' is an array (false).
     */
    public static boolean isArray_versionId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'versionId'
     */
    public static int offset_versionId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'versionId'
     */
    public static int offsetBits_versionId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'versionId'
     */
    public int get_versionId() {
        return (int)getUIntBEElement(offsetBits_versionId(), 16);
    }

    /**
     * Set the value of the field 'versionId'
     */
    public void set_versionId(int value) {
        setUIntBEElement(offsetBits_versionId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'versionId'
     */
    public static int size_versionId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'versionId'
     */
    public static int sizeBits_versionId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: blockLen
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'blockLen' is signed (false).
     */
    public static boolean isSigned_blockLen() {
        return false;
    }

    /**
     * Return whether the field 'blockLen' is an array (false).
     */
    public static boolean isArray_blockLen() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'blockLen'
     */
    public static int offset_blockLen() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'blockLen'
     */
    public static int offsetBits_blockLen() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'blockLen'
     */
    public int get_blockLen() {
        return (int)getUIntBEElement(offsetBits_blockLen(), 16);
    }

    /**
     * Set the value of the field 'blockLen'
     */
    public void set_blockLen(int value) {
        setUIntBEElement(offsetBits_blockLen(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'blockLen'
     */
    public static int size_blockLen() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'blockLen'
     */
    public static int sizeBits_blockLen() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: blockStart
    //   Field type: int, unsigned
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'blockStart' is signed (false).
     */
    public static boolean isSigned_blockStart() {
        return false;
    }

    /**
     * Return whether the field 'blockStart' is an array (false).
     */
    public static boolean isArray_blockStart() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'blockStart'
     */
    public static int offset_blockStart() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'blockStart'
     */
    public static int offsetBits_blockStart() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'blockStart'
     */
    public int get_blockStart() {
        return (int)getUIntBEElement(offsetBits_blockStart(), 16);
    }

    /**
     * Set the value of the field 'blockStart'
     */
    public void set_blockStart(int value) {
        setUIntBEElement(offsetBits_blockStart(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'blockStart'
     */
    public static int size_blockStart() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'blockStart'
     */
    public static int sizeBits_blockStart() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: startProg
    //   Field type: int, unsigned
    //   Offset (bits): 48
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'startProg' is signed (false).
     */
    public static boolean isSigned_startProg() {
        return false;
    }

    /**
     * Return whether the field 'startProg' is an array (false).
     */
    public static boolean isArray_startProg() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'startProg'
     */
    public static int offset_startProg() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'startProg'
     */
    public static int offsetBits_startProg() {
        return 48;
    }

    /**
     * Return the value (as a int) of the field 'startProg'
     */
    public int get_startProg() {
        return (int)getUIntBEElement(offsetBits_startProg(), 16);
    }

    /**
     * Set the value of the field 'startProg'
     */
    public void set_startProg(int value) {
        setUIntBEElement(offsetBits_startProg(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'startProg'
     */
    public static int size_startProg() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'startProg'
     */
    public static int sizeBits_startProg() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: endProg
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'endProg' is signed (false).
     */
    public static boolean isSigned_endProg() {
        return false;
    }

    /**
     * Return whether the field 'endProg' is an array (false).
     */
    public static boolean isArray_endProg() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'endProg'
     */
    public static int offset_endProg() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'endProg'
     */
    public static int offsetBits_endProg() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'endProg'
     */
    public int get_endProg() {
        return (int)getUIntBEElement(offsetBits_endProg(), 16);
    }

    /**
     * Set the value of the field 'endProg'
     */
    public void set_endProg(int value) {
        setUIntBEElement(offsetBits_endProg(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'endProg'
     */
    public static int size_endProg() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'endProg'
     */
    public static int sizeBits_endProg() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nTracks
    //   Field type: int, unsigned
    //   Offset (bits): 80
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nTracks' is signed (false).
     */
    public static boolean isSigned_nTracks() {
        return false;
    }

    /**
     * Return whether the field 'nTracks' is an array (false).
     */
    public static boolean isArray_nTracks() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nTracks'
     */
    public static int offset_nTracks() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nTracks'
     */
    public static int offsetBits_nTracks() {
        return 80;
    }

    /**
     * Return the value (as a int) of the field 'nTracks'
     */
    public int get_nTracks() {
        return (int)getUIntBEElement(offsetBits_nTracks(), 16);
    }

    /**
     * Set the value of the field 'nTracks'
     */
    public void set_nTracks(int value) {
        setUIntBEElement(offsetBits_nTracks(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'nTracks'
     */
    public static int size_nTracks() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nTracks'
     */
    public static int sizeBits_nTracks() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: wClocks
    //   Field type: int, unsigned
    //   Offset (bits): 96
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'wClocks' is signed (false).
     */
    public static boolean isSigned_wClocks() {
        return false;
    }

    /**
     * Return whether the field 'wClocks' is an array (false).
     */
    public static boolean isArray_wClocks() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'wClocks'
     */
    public static int offset_wClocks() {
        return (96 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'wClocks'
     */
    public static int offsetBits_wClocks() {
        return 96;
    }

    /**
     * Return the value (as a int) of the field 'wClocks'
     */
    public int get_wClocks() {
        return (int)getUIntBEElement(offsetBits_wClocks(), 16);
    }

    /**
     * Set the value of the field 'wClocks'
     */
    public void set_wClocks(int value) {
        setUIntBEElement(offsetBits_wClocks(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'wClocks'
     */
    public static int size_wClocks() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'wClocks'
     */
    public static int sizeBits_wClocks() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: asyncs
    //   Field type: int, unsigned
    //   Offset (bits): 112
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'asyncs' is signed (false).
     */
    public static boolean isSigned_asyncs() {
        return false;
    }

    /**
     * Return whether the field 'asyncs' is an array (false).
     */
    public static boolean isArray_asyncs() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'asyncs'
     */
    public static int offset_asyncs() {
        return (112 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'asyncs'
     */
    public static int offsetBits_asyncs() {
        return 112;
    }

    /**
     * Return the value (as a int) of the field 'asyncs'
     */
    public int get_asyncs() {
        return (int)getUIntBEElement(offsetBits_asyncs(), 16);
    }

    /**
     * Set the value of the field 'asyncs'
     */
    public void set_asyncs(int value) {
        setUIntBEElement(offsetBits_asyncs(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'asyncs'
     */
    public static int size_asyncs() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'asyncs'
     */
    public static int sizeBits_asyncs() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: wClock0
    //   Field type: int, unsigned
    //   Offset (bits): 128
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'wClock0' is signed (false).
     */
    public static boolean isSigned_wClock0() {
        return false;
    }

    /**
     * Return whether the field 'wClock0' is an array (false).
     */
    public static boolean isArray_wClock0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'wClock0'
     */
    public static int offset_wClock0() {
        return (128 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'wClock0'
     */
    public static int offsetBits_wClock0() {
        return 128;
    }

    /**
     * Return the value (as a int) of the field 'wClock0'
     */
    public int get_wClock0() {
        return (int)getUIntBEElement(offsetBits_wClock0(), 16);
    }

    /**
     * Set the value of the field 'wClock0'
     */
    public void set_wClock0(int value) {
        setUIntBEElement(offsetBits_wClock0(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'wClock0'
     */
    public static int size_wClock0() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'wClock0'
     */
    public static int sizeBits_wClock0() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: gate0
    //   Field type: int, unsigned
    //   Offset (bits): 144
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'gate0' is signed (false).
     */
    public static boolean isSigned_gate0() {
        return false;
    }

    /**
     * Return whether the field 'gate0' is an array (false).
     */
    public static boolean isArray_gate0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'gate0'
     */
    public static int offset_gate0() {
        return (144 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'gate0'
     */
    public static int offsetBits_gate0() {
        return 144;
    }

    /**
     * Return the value (as a int) of the field 'gate0'
     */
    public int get_gate0() {
        return (int)getUIntBEElement(offsetBits_gate0(), 16);
    }

    /**
     * Set the value of the field 'gate0'
     */
    public void set_gate0(int value) {
        setUIntBEElement(offsetBits_gate0(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'gate0'
     */
    public static int size_gate0() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'gate0'
     */
    public static int sizeBits_gate0() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: inEvts
    //   Field type: int, unsigned
    //   Offset (bits): 160
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'inEvts' is signed (false).
     */
    public static boolean isSigned_inEvts() {
        return false;
    }

    /**
     * Return whether the field 'inEvts' is an array (false).
     */
    public static boolean isArray_inEvts() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'inEvts'
     */
    public static int offset_inEvts() {
        return (160 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'inEvts'
     */
    public static int offsetBits_inEvts() {
        return 160;
    }

    /**
     * Return the value (as a int) of the field 'inEvts'
     */
    public int get_inEvts() {
        return (int)getUIntBEElement(offsetBits_inEvts(), 16);
    }

    /**
     * Set the value of the field 'inEvts'
     */
    public void set_inEvts(int value) {
        setUIntBEElement(offsetBits_inEvts(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'inEvts'
     */
    public static int size_inEvts() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'inEvts'
     */
    public static int sizeBits_inEvts() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: async0
    //   Field type: int, unsigned
    //   Offset (bits): 176
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'async0' is signed (false).
     */
    public static boolean isSigned_async0() {
        return false;
    }

    /**
     * Return whether the field 'async0' is an array (false).
     */
    public static boolean isArray_async0() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'async0'
     */
    public static int offset_async0() {
        return (176 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'async0'
     */
    public static int offsetBits_async0() {
        return 176;
    }

    /**
     * Return the value (as a int) of the field 'async0'
     */
    public int get_async0() {
        return (int)getUIntBEElement(offsetBits_async0(), 16);
    }

    /**
     * Set the value of the field 'async0'
     */
    public void set_async0(int value) {
        setUIntBEElement(offsetBits_async0(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'async0'
     */
    public static int size_async0() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'async0'
     */
    public static int sizeBits_async0() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: appSize
    //   Field type: int, unsigned
    //   Offset (bits): 192
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'appSize' is signed (false).
     */
    public static boolean isSigned_appSize() {
        return false;
    }

    /**
     * Return whether the field 'appSize' is an array (false).
     */
    public static boolean isArray_appSize() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'appSize'
     */
    public static int offset_appSize() {
        return (192 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'appSize'
     */
    public static int offsetBits_appSize() {
        return 192;
    }

    /**
     * Return the value (as a int) of the field 'appSize'
     */
    public int get_appSize() {
        return (int)getUIntBEElement(offsetBits_appSize(), 16);
    }

    /**
     * Set the value of the field 'appSize'
     */
    public void set_appSize(int value) {
        setUIntBEElement(offsetBits_appSize(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'appSize'
     */
    public static int size_appSize() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'appSize'
     */
    public static int sizeBits_appSize() {
        return 16;
    }

}
