# Initial paths/files
BUILDDIR ?= build/$(MOTE)
MAIN_APPC = $(BUILDDIR)/app.c
MAIN_EXE = $(BUILDDIR)/main.exe
MAIN_SREC = $(BUILDDIR)/main.srec
MAIN_IHEX = $(BUILDDIR)/main.ihex
MAIN_HEX = $(BUILDDIR)/main.hex
DUMP_FILE = $(BUILDDIR)/wiring-check.xml

# programs and config "path/names"
OBJCOPY = /home/branco/arduino-1.0.5/hardware/tools/avr/bin/avr-objcopy
OBJDUMP = avr-objdump
GCC = /home/branco/arduino-1.0.5/hardware/tools/avr/bin/avr-gcc
AVRDUDE = /home/branco/arduino-1.0.5/hardware/tools/avrdude
AVRDUDECONF = /home/branco/arduino-1.0.5/hardware/tools/avrdude.conf


# MCU and CLOCK
ifeq ($(MOTE),uno)
  AVRDUDE_MCU = m328p
  MCU=atmega328p
  MCUCLK = 16
  F_CPU = 16000000ul
  DEVTYPE = __AVR_ATmega328P__
  TOS_INO = tos_uno
  ISP_BAUDRATE = 115200
  AVRDUDEPROG = arduino
else ifeq ($(MOTE),mega)
  AVRDUDE_MCU = atmega2560
  MCU=atmega2560
  MCUCLK = 16
  F_CPU = 16000000ul
  DEVTYPE = __AVR_ATmega2560__
  TOS_INO = tos_mega
  ISP_BAUDRATE = 115200
  AVRDUDEPROG = wiring
endif

#  Save makecmdgoals (a read only var) to goals so that we can modify it.
GOALS += $(MAKECMDGOALS)

#  Extract user options from goals of the form opt,arg, transform to opt=arg,
#  and evaluate.  Then, reduce GOALS to have the args removed.
OptRE := [,.]
GoalOpts := $(shell perl -e 'print join " ", map {s{^(.*?)$(OptRE)}{\U$$1=};$$_} grep /$(OptRE)/, split /\s+/, "$(GOALS)";')
GOALS := $(shell perl -e '$$_="$(GOALS)"; s{$(OptRE)\S*}{}g; print;')
$(foreach opt,$(GoalOpts),$(eval $(opt)))

INSTALL ?= 1
USB ?= /dev/ttyACM0

# Extract all "tos_uno"/"tos_mega" subdirectories as includes
INCDIRS := $(addprefix -I,$(shell find $(VMDIR)/$(TOS_INO)/ -type d -print))
#$(error INCDIRS: $(INCDIRS))

OPT_1 =  -fnesc-include=tos -topdir=$(APPDIR) -fnesc-scheduler=TinySchedulerC,TinySchedulerC.TaskBasic,TaskBasic,TaskBasic,runTask,postTask  -o $(MAIN_EXE) -fnesc-separator=__ -Wall -Wshadow -Wnesc-all -fnesc-cfile=$(MAIN_APPC) --param max-inline-insns-single=100000 -fnesc-dump=wiring   -fnesc-dumpfile=$(DUMP_FILE) -lm  -fnesc-target=avr -fnesc-no-debug

OPT_2 =  -mmcu=$(MCU) -DMHZ=$(MCUCLK) -D$(DEVTYPE) -DF_CPU=$(F_CPU) -DTERRA_NODE_ID=$(INSTALL)

OPT_3 =  $(INCDIRS) $(CFLAGS)

# Tentativa para o UNO, falta recriar os arquivos de hardware/port/pins para o ATmega168/328
#OPT_3 =  -I/home/branco/gitspace/Terra/nescino/src/ino/atm328p  -I/opt/tinyos-2.1.2/tos/platforms/mica -I/opt/tinyos-2.1.2/tos/platforms/iris/chips/rf230 -I/opt/tinyos-2.1.2/tos/chips/rf230 -I/opt/tinyos-2.1.2/tos/lib/rfxlink/layers -I/opt/tinyos-2.1.2/tos/lib/rfxlink/util  -I/opt/tinyos-2.1.2/tos/chips/atm128 -I/opt/tinyos-2.1.2/tos/chips/atm128/adc -I/opt/tinyos-2.1.2/tos/chips/atm128/timer -I/opt/tinyos-2.1.2/tos/chips/atm128 -I/opt/tinyos-2.1.2/tos/chips/atm128/adc -I/opt/tinyos-2.1.2/tos/chips/atm128/pins -I/opt/tinyos-2.1.2/tos/chips/atm128/spi -I/opt/tinyos-2.1.2/tos/chips/atm128/i2c -I/opt/tinyos-2.1.2/tos/chips/atm128/timer -I/opt/tinyos-2.1.2/tos/lib/timer -I/opt/tinyos-2.1.2/tos/lib/serial -I/opt/tinyos-2.1.2/tos/lib/power -I/opt/tinyos-2.1.2/tos/lib/diagmsg -I/opt/tinyos-2.1.2/tos/interfaces -I/opt/tinyos-2.1.2/tos/types -I/opt/tinyos-2.1.2/tos/system -DMHZ=4


mega: builddir exe bytes $(BUILD_EXTRA_DEPS)
	$(info **********  Makefile Ino: Mega *************)

uno: builddir exe bytes $(BUILD_EXTRA_DEPS)
	$(info **********  Makefile Ino: Uno *************)

exe: 
	@echo "    compiling $(COMPONENT) to a $(PLATFORM) binary"
	nescc $(OPT_1) $(OPT_2) $(OPT_3) -gcc=$(GCC) $(COMPONENT).nc
	@$(OBJCOPY) -O ihex -R .eeprom $(MAIN_EXE) $(MAIN_HEX)
	@echo "    compiled $(COMPONENT) to $(MAIN_EXE)"

%:
	@:

install.%: 
	@$(AVRDUDE) -C$(AVRDUDECONF)  -v -p$(AVRDUDE_MCU) -c$(AVRDUDEPROG) -P$(USB) -b$(ISP_BAUDRATE) -D -Uflash:w:$(MAIN_HEX):i

install: 
	@$(AVRDUDE) -C$(AVRDUDECONF)  -v -p$(AVRDUDE_MCU) -c$(AVRDUDEPROG) -P$(USB) -b$(ISP_BAUDRATE) -D -Uflash:w:$(MAIN_HEX):i


builddir: 
	@mkdir -p $(BUILDDIR)

bytes: 
	@echo "******** Application memory size ***************"
	@$(OBJDUMP) -h $(MAIN_EXE) | perl -ne '$$b{$$1}=hex $$2 if /^\s*\d+\s*\.(text|data|bss)\s+(\S+)/; END { printf("%16d bytes in ROM\n%16d bytes in RAM\n",$$b{text}+$$b{data},$$b{data}+$$b{bss}); }'
	@echo "************************************************"

