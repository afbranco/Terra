/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'setDataNDMsg'
 * message type.
 */

public class setDataNDMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 25;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 131;

    /** Create a new setDataNDMsg of size 25. */
    public setDataNDMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new setDataNDMsg of the given data_length. */
    public setDataNDMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new setDataNDMsg with the given data_length
     * and base offset.
     */
    public setDataNDMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new setDataNDMsg using the given byte array
     * as backing store.
     */
    public setDataNDMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new setDataNDMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public setDataNDMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new setDataNDMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public setDataNDMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new setDataNDMsg embedded in the given message
     * at the given base offset.
     */
    public setDataNDMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new setDataNDMsg embedded in the given message
     * at the given base offset and length.
     */
    public setDataNDMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <setDataNDMsg> \n";
      try {
        s += "  [versionId=0x"+Long.toHexString(get_versionId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [seq=0x"+Long.toHexString(get_seq())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [targetMote=0x"+Long.toHexString(get_targetMote())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [nSections=0x"+Long.toHexString(get_nSections())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Data=";
        for (int i = 0; i < 18; i++) {
          s += "0x"+Long.toHexString(getElement_Data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: versionId
    //   Field type: int, signed
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'versionId' is signed (true).
     */
    public static boolean isSigned_versionId() {
        return true;
    }

    /**
     * Return whether the field 'versionId' is an array (false).
     */
    public static boolean isArray_versionId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'versionId'
     */
    public static int offset_versionId() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'versionId'
     */
    public static int offsetBits_versionId() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'versionId'
     */
    public int get_versionId() {
        return (int)getUIntBEElement(offsetBits_versionId(), 16);
    }

    /**
     * Set the value of the field 'versionId'
     */
    public void set_versionId(int value) {
        setUIntBEElement(offsetBits_versionId(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'versionId'
     */
    public static int size_versionId() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'versionId'
     */
    public static int sizeBits_versionId() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: seq
    //   Field type: int, signed
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'seq' is signed (true).
     */
    public static boolean isSigned_seq() {
        return true;
    }

    /**
     * Return whether the field 'seq' is an array (false).
     */
    public static boolean isArray_seq() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'seq'
     */
    public static int offset_seq() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'seq'
     */
    public static int offsetBits_seq() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'seq'
     */
    public int get_seq() {
        return (int)getUIntBEElement(offsetBits_seq(), 16);
    }

    /**
     * Set the value of the field 'seq'
     */
    public void set_seq(int value) {
        setUIntBEElement(offsetBits_seq(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'seq'
     */
    public static int size_seq() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'seq'
     */
    public static int sizeBits_seq() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: targetMote
    //   Field type: int, signed
    //   Offset (bits): 32
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'targetMote' is signed (true).
     */
    public static boolean isSigned_targetMote() {
        return true;
    }

    /**
     * Return whether the field 'targetMote' is an array (false).
     */
    public static boolean isArray_targetMote() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'targetMote'
     */
    public static int offset_targetMote() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'targetMote'
     */
    public static int offsetBits_targetMote() {
        return 32;
    }

    /**
     * Return the value (as a int) of the field 'targetMote'
     */
    public int get_targetMote() {
        return (int)getUIntBEElement(offsetBits_targetMote(), 16);
    }

    /**
     * Set the value of the field 'targetMote'
     */
    public void set_targetMote(int value) {
        setUIntBEElement(offsetBits_targetMote(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'targetMote'
     */
    public static int size_targetMote() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'targetMote'
     */
    public static int sizeBits_targetMote() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: nSections
    //   Field type: short, signed
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'nSections' is signed (true).
     */
    public static boolean isSigned_nSections() {
        return true;
    }

    /**
     * Return whether the field 'nSections' is an array (false).
     */
    public static boolean isArray_nSections() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'nSections'
     */
    public static int offset_nSections() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'nSections'
     */
    public static int offsetBits_nSections() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'nSections'
     */
    public short get_nSections() {
        return (short)getUIntBEElement(offsetBits_nSections(), 8);
    }

    /**
     * Set the value of the field 'nSections'
     */
    public void set_nSections(short value) {
        setUIntBEElement(offsetBits_nSections(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'nSections'
     */
    public static int size_nSections() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'nSections'
     */
    public static int sizeBits_nSections() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Data
    //   Field type: byte[], signed
    //   Offset (bits): 56
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Data' is signed (true).
     */
    public static boolean isSigned_Data() {
        return true;
    }

    /**
     * Return whether the field 'Data' is an array (true).
     */
    public static boolean isArray_Data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'Data'
     */
    public static int offset_Data(int index1) {
        int offset = 56;
        if (index1 < 0 || index1 >= 18) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Data'
     */
    public static int offsetBits_Data(int index1) {
        int offset = 56;
        if (index1 < 0 || index1 >= 18) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'Data' as a byte[]
     */
    public byte[] get_Data() {
        byte[] tmp = new byte[18];
        for (int index0 = 0; index0 < numElements_Data(0); index0++) {
            tmp[index0] = getElement_Data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'Data' from the given byte[]
     */
    public void set_Data(byte[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_Data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a byte) of the array 'Data'
     */
    public byte getElement_Data(int index1) {
        return (byte)getSIntBEElement(offsetBits_Data(index1), 8);
    }

    /**
     * Set an element of the array 'Data'
     */
    public void setElement_Data(int index1, byte value) {
        setSIntBEElement(offsetBits_Data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'Data'
     */
    public static int totalSize_Data() {
        return (144 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'Data'
     */
    public static int totalSizeBits_Data() {
        return 144;
    }

    /**
     * Return the size, in bytes, of each element of the array 'Data'
     */
    public static int elementSize_Data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'Data'
     */
    public static int elementSizeBits_Data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'Data'
     */
    public static int numDimensions_Data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'Data'
     */
    public static int numElements_Data() {
        return 18;
    }

    /**
     * Return the number of elements in the array 'Data'
     * for the given dimension.
     */
    public static int numElements_Data(int dimension) {
      int array_dims[] = { 18,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'Data' with a String
     */
    public void setString_Data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_Data(i, (byte)s.charAt(i));
         }
         setElement_Data(i, (byte)0); //null terminate
    }

    /**
     * Read the array 'Data' as a String
     */
    public String getString_Data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,18)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_Data(i) == (char)0) break;
             carr[i] = (char)getElement_Data(i);
         }
         return new String(carr,0,i);
    }

}
