/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'sendGRMsg'
 * message type.
 */
package messages;

public class sendGRMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 27;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 140;

    /** Create a new sendGRMsg of size 27. */
    public sendGRMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new sendGRMsg of the given data_length. */
    public sendGRMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sendGRMsg with the given data_length
     * and base offset.
     */
    public sendGRMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sendGRMsg using the given byte array
     * as backing store.
     */
    public sendGRMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sendGRMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public sendGRMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sendGRMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public sendGRMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sendGRMsg embedded in the given message
     * at the given base offset.
     */
    public sendGRMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new sendGRMsg embedded in the given message
     * at the given base offset and length.
     */
    public sendGRMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <sendGRMsg> \n";
      try {
        s += "  [ReqMote=0x"+Long.toHexString(get_ReqMote())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [ReqSeq=0x"+Long.toHexString(get_ReqSeq())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [MaxHops=0x"+Long.toHexString(get_MaxHops())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [HopNumber=0x"+Long.toHexString(get_HopNumber())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [grId=0x"+Long.toHexString(get_grId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [grParam=0x"+Long.toHexString(get_grParam())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [TargetMote=0x"+Long.toHexString(get_TargetMote())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [evtId=0x"+Long.toHexString(get_evtId())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [Data=";
        for (int i = 0; i < 16; i++) {
          s += "0x"+Long.toHexString(getElement_Data(i) & 0xff)+" ";
        }
        s += "]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ReqMote
    //   Field type: int, unsigned
    //   Offset (bits): 0
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ReqMote' is signed (false).
     */
    public static boolean isSigned_ReqMote() {
        return false;
    }

    /**
     * Return whether the field 'ReqMote' is an array (false).
     */
    public static boolean isArray_ReqMote() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ReqMote'
     */
    public static int offset_ReqMote() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ReqMote'
     */
    public static int offsetBits_ReqMote() {
        return 0;
    }

    /**
     * Return the value (as a int) of the field 'ReqMote'
     */
    public int get_ReqMote() {
        return (int)getUIntBEElement(offsetBits_ReqMote(), 16);
    }

    /**
     * Set the value of the field 'ReqMote'
     */
    public void set_ReqMote(int value) {
        setUIntBEElement(offsetBits_ReqMote(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ReqMote'
     */
    public static int size_ReqMote() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ReqMote'
     */
    public static int sizeBits_ReqMote() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: ReqSeq
    //   Field type: int, unsigned
    //   Offset (bits): 16
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'ReqSeq' is signed (false).
     */
    public static boolean isSigned_ReqSeq() {
        return false;
    }

    /**
     * Return whether the field 'ReqSeq' is an array (false).
     */
    public static boolean isArray_ReqSeq() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'ReqSeq'
     */
    public static int offset_ReqSeq() {
        return (16 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'ReqSeq'
     */
    public static int offsetBits_ReqSeq() {
        return 16;
    }

    /**
     * Return the value (as a int) of the field 'ReqSeq'
     */
    public int get_ReqSeq() {
        return (int)getUIntBEElement(offsetBits_ReqSeq(), 16);
    }

    /**
     * Set the value of the field 'ReqSeq'
     */
    public void set_ReqSeq(int value) {
        setUIntBEElement(offsetBits_ReqSeq(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'ReqSeq'
     */
    public static int size_ReqSeq() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'ReqSeq'
     */
    public static int sizeBits_ReqSeq() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: MaxHops
    //   Field type: short, unsigned
    //   Offset (bits): 32
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'MaxHops' is signed (false).
     */
    public static boolean isSigned_MaxHops() {
        return false;
    }

    /**
     * Return whether the field 'MaxHops' is an array (false).
     */
    public static boolean isArray_MaxHops() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'MaxHops'
     */
    public static int offset_MaxHops() {
        return (32 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'MaxHops'
     */
    public static int offsetBits_MaxHops() {
        return 32;
    }

    /**
     * Return the value (as a short) of the field 'MaxHops'
     */
    public short get_MaxHops() {
        return (short)getUIntBEElement(offsetBits_MaxHops(), 8);
    }

    /**
     * Set the value of the field 'MaxHops'
     */
    public void set_MaxHops(short value) {
        setUIntBEElement(offsetBits_MaxHops(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'MaxHops'
     */
    public static int size_MaxHops() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'MaxHops'
     */
    public static int sizeBits_MaxHops() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: HopNumber
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'HopNumber' is signed (false).
     */
    public static boolean isSigned_HopNumber() {
        return false;
    }

    /**
     * Return whether the field 'HopNumber' is an array (false).
     */
    public static boolean isArray_HopNumber() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'HopNumber'
     */
    public static int offset_HopNumber() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'HopNumber'
     */
    public static int offsetBits_HopNumber() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'HopNumber'
     */
    public short get_HopNumber() {
        return (short)getUIntBEElement(offsetBits_HopNumber(), 8);
    }

    /**
     * Set the value of the field 'HopNumber'
     */
    public void set_HopNumber(short value) {
        setUIntBEElement(offsetBits_HopNumber(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'HopNumber'
     */
    public static int size_HopNumber() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'HopNumber'
     */
    public static int sizeBits_HopNumber() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: grId
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'grId' is signed (false).
     */
    public static boolean isSigned_grId() {
        return false;
    }

    /**
     * Return whether the field 'grId' is an array (false).
     */
    public static boolean isArray_grId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'grId'
     */
    public static int offset_grId() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'grId'
     */
    public static int offsetBits_grId() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'grId'
     */
    public short get_grId() {
        return (short)getUIntBEElement(offsetBits_grId(), 8);
    }

    /**
     * Set the value of the field 'grId'
     */
    public void set_grId(short value) {
        setUIntBEElement(offsetBits_grId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'grId'
     */
    public static int size_grId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'grId'
     */
    public static int sizeBits_grId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: grParam
    //   Field type: short, unsigned
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'grParam' is signed (false).
     */
    public static boolean isSigned_grParam() {
        return false;
    }

    /**
     * Return whether the field 'grParam' is an array (false).
     */
    public static boolean isArray_grParam() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'grParam'
     */
    public static int offset_grParam() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'grParam'
     */
    public static int offsetBits_grParam() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'grParam'
     */
    public short get_grParam() {
        return (short)getUIntBEElement(offsetBits_grParam(), 8);
    }

    /**
     * Set the value of the field 'grParam'
     */
    public void set_grParam(short value) {
        setUIntBEElement(offsetBits_grParam(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'grParam'
     */
    public static int size_grParam() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'grParam'
     */
    public static int sizeBits_grParam() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: TargetMote
    //   Field type: int, unsigned
    //   Offset (bits): 64
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'TargetMote' is signed (false).
     */
    public static boolean isSigned_TargetMote() {
        return false;
    }

    /**
     * Return whether the field 'TargetMote' is an array (false).
     */
    public static boolean isArray_TargetMote() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'TargetMote'
     */
    public static int offset_TargetMote() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'TargetMote'
     */
    public static int offsetBits_TargetMote() {
        return 64;
    }

    /**
     * Return the value (as a int) of the field 'TargetMote'
     */
    public int get_TargetMote() {
        return (int)getUIntBEElement(offsetBits_TargetMote(), 16);
    }

    /**
     * Set the value of the field 'TargetMote'
     */
    public void set_TargetMote(int value) {
        setUIntBEElement(offsetBits_TargetMote(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'TargetMote'
     */
    public static int size_TargetMote() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'TargetMote'
     */
    public static int sizeBits_TargetMote() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: evtId
    //   Field type: short, unsigned
    //   Offset (bits): 80
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'evtId' is signed (false).
     */
    public static boolean isSigned_evtId() {
        return false;
    }

    /**
     * Return whether the field 'evtId' is an array (false).
     */
    public static boolean isArray_evtId() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'evtId'
     */
    public static int offset_evtId() {
        return (80 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'evtId'
     */
    public static int offsetBits_evtId() {
        return 80;
    }

    /**
     * Return the value (as a short) of the field 'evtId'
     */
    public short get_evtId() {
        return (short)getUIntBEElement(offsetBits_evtId(), 8);
    }

    /**
     * Set the value of the field 'evtId'
     */
    public void set_evtId(short value) {
        setUIntBEElement(offsetBits_evtId(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'evtId'
     */
    public static int size_evtId() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'evtId'
     */
    public static int sizeBits_evtId() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: Data
    //   Field type: short[], unsigned
    //   Offset (bits): 88
    //   Size of each element (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'Data' is signed (false).
     */
    public static boolean isSigned_Data() {
        return false;
    }

    /**
     * Return whether the field 'Data' is an array (true).
     */
    public static boolean isArray_Data() {
        return true;
    }

    /**
     * Return the offset (in bytes) of the field 'Data'
     */
    public static int offset_Data(int index1) {
        int offset = 88;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return (offset / 8);
    }

    /**
     * Return the offset (in bits) of the field 'Data'
     */
    public static int offsetBits_Data(int index1) {
        int offset = 88;
        if (index1 < 0 || index1 >= 16) throw new ArrayIndexOutOfBoundsException();
        offset += 0 + index1 * 8;
        return offset;
    }

    /**
     * Return the entire array 'Data' as a short[]
     */
    public short[] get_Data() {
        short[] tmp = new short[16];
        for (int index0 = 0; index0 < numElements_Data(0); index0++) {
            tmp[index0] = getElement_Data(index0);
        }
        return tmp;
    }

    /**
     * Set the contents of the array 'Data' from the given short[]
     */
    public void set_Data(short[] value) {
        for (int index0 = 0; index0 < value.length; index0++) {
            setElement_Data(index0, value[index0]);
        }
    }

    /**
     * Return an element (as a short) of the array 'Data'
     */
    public short getElement_Data(int index1) {
        return (short)getUIntBEElement(offsetBits_Data(index1), 8);
    }

    /**
     * Set an element of the array 'Data'
     */
    public void setElement_Data(int index1, short value) {
        setUIntBEElement(offsetBits_Data(index1), 8, value);
    }

    /**
     * Return the total size, in bytes, of the array 'Data'
     */
    public static int totalSize_Data() {
        return (128 / 8);
    }

    /**
     * Return the total size, in bits, of the array 'Data'
     */
    public static int totalSizeBits_Data() {
        return 128;
    }

    /**
     * Return the size, in bytes, of each element of the array 'Data'
     */
    public static int elementSize_Data() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of each element of the array 'Data'
     */
    public static int elementSizeBits_Data() {
        return 8;
    }

    /**
     * Return the number of dimensions in the array 'Data'
     */
    public static int numDimensions_Data() {
        return 1;
    }

    /**
     * Return the number of elements in the array 'Data'
     */
    public static int numElements_Data() {
        return 16;
    }

    /**
     * Return the number of elements in the array 'Data'
     * for the given dimension.
     */
    public static int numElements_Data(int dimension) {
      int array_dims[] = { 16,  };
        if (dimension < 0 || dimension >= 1) throw new ArrayIndexOutOfBoundsException();
        if (array_dims[dimension] == 0) throw new IllegalArgumentException("Array dimension "+dimension+" has unknown size");
        return array_dims[dimension];
    }

    /**
     * Fill in the array 'Data' with a String
     */
    public void setString_Data(String s) { 
         int len = s.length();
         int i;
         for (i = 0; i < len; i++) {
             setElement_Data(i, (short)s.charAt(i));
         }
         setElement_Data(i, (short)0); //null terminate
    }

    /**
     * Read the array 'Data' as a String
     */
    public String getString_Data() { 
         char carr[] = new char[Math.min(net.tinyos.message.Message.MAX_CONVERTED_STRING_LENGTH,16)];
         int i;
         for (i = 0; i < carr.length; i++) {
             if ((char)getElement_Data(i) == (char)0) break;
             carr[i] = (char)getElement_Data(i);
         }
         return new String(carr,0,i);
    }

}
