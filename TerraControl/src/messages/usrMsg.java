/**
 * This class is automatically generated by mig. DO NOT EDIT THIS FILE.
 * This class implements a Java interface to the 'usrMsg'
 * message type.
 */
package messages;

public class usrMsg extends net.tinyos.message.Message {

    /** The default size of this message type in bytes. */
    public static final int DEFAULT_MESSAGE_SIZE = 25;

    /** The Active Message type associated with this message. */
    public static final int AM_TYPE = 151;

    /** Create a new usrMsg of size 25. */
    public usrMsg() {
        super(DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /** Create a new usrMsg of the given data_length. */
    public usrMsg(int data_length) {
        super(data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new usrMsg with the given data_length
     * and base offset.
     */
    public usrMsg(int data_length, int base_offset) {
        super(data_length, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new usrMsg using the given byte array
     * as backing store.
     */
    public usrMsg(byte[] data) {
        super(data);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new usrMsg using the given byte array
     * as backing store, with the given base offset.
     */
    public usrMsg(byte[] data, int base_offset) {
        super(data, base_offset);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new usrMsg using the given byte array
     * as backing store, with the given base offset and data length.
     */
    public usrMsg(byte[] data, int base_offset, int data_length) {
        super(data, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new usrMsg embedded in the given message
     * at the given base offset.
     */
    public usrMsg(net.tinyos.message.Message msg, int base_offset) {
        super(msg, base_offset, DEFAULT_MESSAGE_SIZE);
        amTypeSet(AM_TYPE);
    }

    /**
     * Create a new usrMsg embedded in the given message
     * at the given base offset and length.
     */
    public usrMsg(net.tinyos.message.Message msg, int base_offset, int data_length) {
        super(msg, base_offset, data_length);
        amTypeSet(AM_TYPE);
    }

    /**
    /* Return a String representation of this message. Includes the
     * message type name and the non-indexed field values.
     */
    public String toString() {
      String s = "Message <usrMsg> \n";
      try {
        s += "  [id=0x"+Long.toHexString(get_id())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [source=0x"+Long.toHexString(get_source())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [target=0x"+Long.toHexString(get_target())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d8_1=0x"+Long.toHexString(get_d8_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d8_2=0x"+Long.toHexString(get_d8_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d8_3=0x"+Long.toHexString(get_d8_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d8_4=0x"+Long.toHexString(get_d8_4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d16_1=0x"+Long.toHexString(get_d16_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d16_2=0x"+Long.toHexString(get_d16_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d16_3=0x"+Long.toHexString(get_d16_3())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d16_4=0x"+Long.toHexString(get_d16_4())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d32_1=0x"+Long.toHexString(get_d32_1())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      try {
        s += "  [d32_2=0x"+Long.toHexString(get_d32_2())+"]\n";
      } catch (ArrayIndexOutOfBoundsException aioobe) { /* Skip field */ }
      return s;
    }

    // Message-type-specific access methods appear below.

    /////////////////////////////////////////////////////////
    // Accessor methods for field: id
    //   Field type: short, unsigned
    //   Offset (bits): 0
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'id' is signed (false).
     */
    public static boolean isSigned_id() {
        return false;
    }

    /**
     * Return whether the field 'id' is an array (false).
     */
    public static boolean isArray_id() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'id'
     */
    public static int offset_id() {
        return (0 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'id'
     */
    public static int offsetBits_id() {
        return 0;
    }

    /**
     * Return the value (as a short) of the field 'id'
     */
    public short get_id() {
        return (short)getUIntBEElement(offsetBits_id(), 8);
    }

    /**
     * Set the value of the field 'id'
     */
    public void set_id(short value) {
        setUIntBEElement(offsetBits_id(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'id'
     */
    public static int size_id() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'id'
     */
    public static int sizeBits_id() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: source
    //   Field type: int, unsigned
    //   Offset (bits): 8
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'source' is signed (false).
     */
    public static boolean isSigned_source() {
        return false;
    }

    /**
     * Return whether the field 'source' is an array (false).
     */
    public static boolean isArray_source() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'source'
     */
    public static int offset_source() {
        return (8 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'source'
     */
    public static int offsetBits_source() {
        return 8;
    }

    /**
     * Return the value (as a int) of the field 'source'
     */
    public int get_source() {
        return (int)getUIntBEElement(offsetBits_source(), 16);
    }

    /**
     * Set the value of the field 'source'
     */
    public void set_source(int value) {
        setUIntBEElement(offsetBits_source(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'source'
     */
    public static int size_source() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'source'
     */
    public static int sizeBits_source() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: target
    //   Field type: int, unsigned
    //   Offset (bits): 24
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'target' is signed (false).
     */
    public static boolean isSigned_target() {
        return false;
    }

    /**
     * Return whether the field 'target' is an array (false).
     */
    public static boolean isArray_target() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'target'
     */
    public static int offset_target() {
        return (24 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'target'
     */
    public static int offsetBits_target() {
        return 24;
    }

    /**
     * Return the value (as a int) of the field 'target'
     */
    public int get_target() {
        return (int)getUIntBEElement(offsetBits_target(), 16);
    }

    /**
     * Set the value of the field 'target'
     */
    public void set_target(int value) {
        setUIntBEElement(offsetBits_target(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'target'
     */
    public static int size_target() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'target'
     */
    public static int sizeBits_target() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d8_1
    //   Field type: short, unsigned
    //   Offset (bits): 40
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd8_1' is signed (false).
     */
    public static boolean isSigned_d8_1() {
        return false;
    }

    /**
     * Return whether the field 'd8_1' is an array (false).
     */
    public static boolean isArray_d8_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd8_1'
     */
    public static int offset_d8_1() {
        return (40 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd8_1'
     */
    public static int offsetBits_d8_1() {
        return 40;
    }

    /**
     * Return the value (as a short) of the field 'd8_1'
     */
    public short get_d8_1() {
        return (short)getUIntBEElement(offsetBits_d8_1(), 8);
    }

    /**
     * Set the value of the field 'd8_1'
     */
    public void set_d8_1(short value) {
        setUIntBEElement(offsetBits_d8_1(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'd8_1'
     */
    public static int size_d8_1() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd8_1'
     */
    public static int sizeBits_d8_1() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d8_2
    //   Field type: short, unsigned
    //   Offset (bits): 48
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd8_2' is signed (false).
     */
    public static boolean isSigned_d8_2() {
        return false;
    }

    /**
     * Return whether the field 'd8_2' is an array (false).
     */
    public static boolean isArray_d8_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd8_2'
     */
    public static int offset_d8_2() {
        return (48 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd8_2'
     */
    public static int offsetBits_d8_2() {
        return 48;
    }

    /**
     * Return the value (as a short) of the field 'd8_2'
     */
    public short get_d8_2() {
        return (short)getUIntBEElement(offsetBits_d8_2(), 8);
    }

    /**
     * Set the value of the field 'd8_2'
     */
    public void set_d8_2(short value) {
        setUIntBEElement(offsetBits_d8_2(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'd8_2'
     */
    public static int size_d8_2() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd8_2'
     */
    public static int sizeBits_d8_2() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d8_3
    //   Field type: short, unsigned
    //   Offset (bits): 56
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd8_3' is signed (false).
     */
    public static boolean isSigned_d8_3() {
        return false;
    }

    /**
     * Return whether the field 'd8_3' is an array (false).
     */
    public static boolean isArray_d8_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd8_3'
     */
    public static int offset_d8_3() {
        return (56 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd8_3'
     */
    public static int offsetBits_d8_3() {
        return 56;
    }

    /**
     * Return the value (as a short) of the field 'd8_3'
     */
    public short get_d8_3() {
        return (short)getUIntBEElement(offsetBits_d8_3(), 8);
    }

    /**
     * Set the value of the field 'd8_3'
     */
    public void set_d8_3(short value) {
        setUIntBEElement(offsetBits_d8_3(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'd8_3'
     */
    public static int size_d8_3() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd8_3'
     */
    public static int sizeBits_d8_3() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d8_4
    //   Field type: short, unsigned
    //   Offset (bits): 64
    //   Size (bits): 8
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd8_4' is signed (false).
     */
    public static boolean isSigned_d8_4() {
        return false;
    }

    /**
     * Return whether the field 'd8_4' is an array (false).
     */
    public static boolean isArray_d8_4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd8_4'
     */
    public static int offset_d8_4() {
        return (64 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd8_4'
     */
    public static int offsetBits_d8_4() {
        return 64;
    }

    /**
     * Return the value (as a short) of the field 'd8_4'
     */
    public short get_d8_4() {
        return (short)getUIntBEElement(offsetBits_d8_4(), 8);
    }

    /**
     * Set the value of the field 'd8_4'
     */
    public void set_d8_4(short value) {
        setUIntBEElement(offsetBits_d8_4(), 8, value);
    }

    /**
     * Return the size, in bytes, of the field 'd8_4'
     */
    public static int size_d8_4() {
        return (8 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd8_4'
     */
    public static int sizeBits_d8_4() {
        return 8;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d16_1
    //   Field type: int, unsigned
    //   Offset (bits): 72
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd16_1' is signed (false).
     */
    public static boolean isSigned_d16_1() {
        return false;
    }

    /**
     * Return whether the field 'd16_1' is an array (false).
     */
    public static boolean isArray_d16_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd16_1'
     */
    public static int offset_d16_1() {
        return (72 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd16_1'
     */
    public static int offsetBits_d16_1() {
        return 72;
    }

    /**
     * Return the value (as a int) of the field 'd16_1'
     */
    public int get_d16_1() {
        return (int)getUIntBEElement(offsetBits_d16_1(), 16);
    }

    /**
     * Set the value of the field 'd16_1'
     */
    public void set_d16_1(int value) {
        setUIntBEElement(offsetBits_d16_1(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd16_1'
     */
    public static int size_d16_1() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd16_1'
     */
    public static int sizeBits_d16_1() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d16_2
    //   Field type: int, unsigned
    //   Offset (bits): 88
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd16_2' is signed (false).
     */
    public static boolean isSigned_d16_2() {
        return false;
    }

    /**
     * Return whether the field 'd16_2' is an array (false).
     */
    public static boolean isArray_d16_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd16_2'
     */
    public static int offset_d16_2() {
        return (88 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd16_2'
     */
    public static int offsetBits_d16_2() {
        return 88;
    }

    /**
     * Return the value (as a int) of the field 'd16_2'
     */
    public int get_d16_2() {
        return (int)getUIntBEElement(offsetBits_d16_2(), 16);
    }

    /**
     * Set the value of the field 'd16_2'
     */
    public void set_d16_2(int value) {
        setUIntBEElement(offsetBits_d16_2(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd16_2'
     */
    public static int size_d16_2() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd16_2'
     */
    public static int sizeBits_d16_2() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d16_3
    //   Field type: int, unsigned
    //   Offset (bits): 104
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd16_3' is signed (false).
     */
    public static boolean isSigned_d16_3() {
        return false;
    }

    /**
     * Return whether the field 'd16_3' is an array (false).
     */
    public static boolean isArray_d16_3() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd16_3'
     */
    public static int offset_d16_3() {
        return (104 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd16_3'
     */
    public static int offsetBits_d16_3() {
        return 104;
    }

    /**
     * Return the value (as a int) of the field 'd16_3'
     */
    public int get_d16_3() {
        return (int)getUIntBEElement(offsetBits_d16_3(), 16);
    }

    /**
     * Set the value of the field 'd16_3'
     */
    public void set_d16_3(int value) {
        setUIntBEElement(offsetBits_d16_3(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd16_3'
     */
    public static int size_d16_3() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd16_3'
     */
    public static int sizeBits_d16_3() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d16_4
    //   Field type: int, unsigned
    //   Offset (bits): 120
    //   Size (bits): 16
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd16_4' is signed (false).
     */
    public static boolean isSigned_d16_4() {
        return false;
    }

    /**
     * Return whether the field 'd16_4' is an array (false).
     */
    public static boolean isArray_d16_4() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd16_4'
     */
    public static int offset_d16_4() {
        return (120 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd16_4'
     */
    public static int offsetBits_d16_4() {
        return 120;
    }

    /**
     * Return the value (as a int) of the field 'd16_4'
     */
    public int get_d16_4() {
        return (int)getUIntBEElement(offsetBits_d16_4(), 16);
    }

    /**
     * Set the value of the field 'd16_4'
     */
    public void set_d16_4(int value) {
        setUIntBEElement(offsetBits_d16_4(), 16, value);
    }

    /**
     * Return the size, in bytes, of the field 'd16_4'
     */
    public static int size_d16_4() {
        return (16 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd16_4'
     */
    public static int sizeBits_d16_4() {
        return 16;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d32_1
    //   Field type: long, unsigned
    //   Offset (bits): 136
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd32_1' is signed (false).
     */
    public static boolean isSigned_d32_1() {
        return false;
    }

    /**
     * Return whether the field 'd32_1' is an array (false).
     */
    public static boolean isArray_d32_1() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd32_1'
     */
    public static int offset_d32_1() {
        return (136 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd32_1'
     */
    public static int offsetBits_d32_1() {
        return 136;
    }

    /**
     * Return the value (as a long) of the field 'd32_1'
     */
    public long get_d32_1() {
        return (long)getUIntBEElement(offsetBits_d32_1(), 32);
    }

    /**
     * Set the value of the field 'd32_1'
     */
    public void set_d32_1(long value) {
        setUIntBEElement(offsetBits_d32_1(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'd32_1'
     */
    public static int size_d32_1() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd32_1'
     */
    public static int sizeBits_d32_1() {
        return 32;
    }

    /////////////////////////////////////////////////////////
    // Accessor methods for field: d32_2
    //   Field type: long, unsigned
    //   Offset (bits): 168
    //   Size (bits): 32
    /////////////////////////////////////////////////////////

    /**
     * Return whether the field 'd32_2' is signed (false).
     */
    public static boolean isSigned_d32_2() {
        return false;
    }

    /**
     * Return whether the field 'd32_2' is an array (false).
     */
    public static boolean isArray_d32_2() {
        return false;
    }

    /**
     * Return the offset (in bytes) of the field 'd32_2'
     */
    public static int offset_d32_2() {
        return (168 / 8);
    }

    /**
     * Return the offset (in bits) of the field 'd32_2'
     */
    public static int offsetBits_d32_2() {
        return 168;
    }

    /**
     * Return the value (as a long) of the field 'd32_2'
     */
    public long get_d32_2() {
        return (long)getUIntBEElement(offsetBits_d32_2(), 32);
    }

    /**
     * Set the value of the field 'd32_2'
     */
    public void set_d32_2(long value) {
        setUIntBEElement(offsetBits_d32_2(), 32, value);
    }

    /**
     * Return the size, in bytes, of the field 'd32_2'
     */
    public static int size_d32_2() {
        return (32 / 8);
    }

    /**
     * Return the size, in bits, of the field 'd32_2'
     */
    public static int sizeBits_d32_2() {
        return 32;
    }

}
